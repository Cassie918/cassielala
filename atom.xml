<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LALA就是ME</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="cassielala.top/"/>
  <updated>2019-02-12T08:57:25.675Z</updated>
  <id>cassielala.top/</id>
  
  <author>
    <name>Cassie LaLa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>写给自己看的SQL摘抄</title>
    <link href="cassielala.top/2019/02/12/%E5%86%99%E7%BB%99%E8%87%AA%E5%B7%B1%E7%9C%8B%E7%9A%84SQL%E6%91%98%E6%8A%84/"/>
    <id>cassielala.top/2019/02/12/写给自己看的SQL摘抄/</id>
    <published>2019-02-12T08:54:37.000Z</published>
    <updated>2019-02-12T08:57:25.675Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文来源于廖雪峰的SQL教程，由于是写给自己看的知识点汇总，所以简单的介绍类文字可能就不介绍了，直接上干货。<br>点击<a href="https://www.liaoxuefeng.com/wiki/001508284671805d39d23243d884b8b99f440bfae87b0f4000" target="_blank" rel="noopener">这里</a>可查看廖雪峰教程原址。</p></blockquote><h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><ul><li>概念：指能够唯一区分出不同记录的字段称之为主键。</li><li><p>主键选取原则：不使用任何业务相关的字段作为主键。<br>主键：身份证号、手机号、邮箱地址（X）<br>主键：自增整数类型<code>id</code>（√）<br>因为主键是用来唯一定位记录的，修改了主键，会造成一系列的影响，假设以身份证号为主键，当身份证号升位了，或者需要变更，作为主键，不得不修改的时候，就会对业务产生严重影响。所以要避免使用业务相关字段作为主键。<br>如下表，<code>id</code>为学生信息主键：</p><p>|id|class_id|name|gender|score|<br>|:-:|:-:|:-:|:-:|:-:|<br>|1|1|小明|M|90|<br>|2|1|小红|F|95|</p></li></ul><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><ul><li>概念：将本表数据关联另一张表的字段称之为外键。</li><li><p>定义外键约束：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_class_id  <span class="comment">/* 外键约束名称 */</span></span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (class_id)  <span class="comment">/* 定义外键字段 */</span></span><br><span class="line"><span class="keyword">REFERENCES</span> classes (<span class="keyword">id</span>);  <span class="comment">/* 将外键关联到`classes`表的`id`列 */</span></span><br></pre></td></tr></table></figure></li><li><p>删除外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> fk_class_id;</span><br></pre></td></tr></table></figure></li></ul><h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><ul><li><p>概念：索引是关系数据库中对某一列或多个列的值进行预排序的数据结构。通过使用索引，可以让数据库系统不必扫描整个表，而是直接定位到符合条件的记录，这样就大大加快了查询速度。</p><p>|id|class_id|name|gender|score|<br>|:-:|:-:|:-:|:-:|:-:|<br>|1|1|小明|M|90|<br>|2|1|小红|F|95|<br>|3|1|小军|M|88|<br>如果要经常根据score列进行查询，就可以对score列创建索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_score (score);</span><br></pre></td></tr></table></figure><p>使用ADD INDEX idx_score (score)就创建了一个名称为idx_score，使用列score的索引。索引名称是任意的，索引如果有多列，可以在括号里依次写上，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">INDEX</span> idx_name_score (<span class="keyword">name</span>, score);</span><br></pre></td></tr></table></figure></li><li><p>索引的效率取决于索引列的值是否散列，即该列的值如果越互不相同，那么索引效率越高。反过来，如果记录的列存在大量相同的值，例如gender列，大约一半的记录值是M，另一半是F，因此，对该列创建索引就没有意义。</p></li><li>可以对一张表创建多个索引。索引的优点是提高了查询效率，缺点是在插入、更新和删除记录时，需要同时修改索引，因此，索引越多，插入、更新和删除记录的速度就越慢。</li><li>对于主键，关系数据库会自动对其创建主键索引。使用主键索引的效率是最高的，因为主键会保证绝对唯一。</li></ul><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>基本数据准备，<code>students</code>表和<code>classes</code>表  </p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">class_id</th><th style="text-align:center">name</th><th style="text-align:center">gender</th><th style="text-align:center">score</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">小明</td><td style="text-align:center">M</td><td style="text-align:center">90</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">小红</td><td style="text-align:center">F</td><td style="text-align:center">95</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1</td><td style="text-align:center">小军</td><td style="text-align:center">M</td><td style="text-align:center">88</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">1</td><td style="text-align:center">小米</td><td style="text-align:center">F</td><td style="text-align:center">73</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">2</td><td style="text-align:center">小白</td><td style="text-align:center">F</td><td style="text-align:center">81</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">2</td><td style="text-align:center">小兵</td><td style="text-align:center">M</td><td style="text-align:center">55</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">2</td><td style="text-align:center">小林</td><td style="text-align:center">M</td><td style="text-align:center">85</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">3</td><td style="text-align:center">小新</td><td style="text-align:center">F</td><td style="text-align:center">91</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">3</td><td style="text-align:center">小王</td><td style="text-align:center">M</td><td style="text-align:center">89</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">3</td><td style="text-align:center">小丽</td><td style="text-align:center">F</td><td style="text-align:center">85  </td></tr></tbody></table><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">name</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">一班</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">二班</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">三班</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">四班</td></tr></tbody></table><h3 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h3><p>查询所有数据<code>SELECT * FROM &lt;表名&gt;</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 查询students表的所有数据 */</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure></p><p>按条件查询<br><code>SELECT * FROM &lt;表名&gt; WHERE &lt;条件表达式&gt;</code><br>与：<code>AND</code><br>或：<code>OR</code><br>非：<code>NOT</code>或者<code>&lt;&gt;</code>   </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 分数在80分或以上的学生 */</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> score &gt;= <span class="number">80</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分数在80分以上的男生 */</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> score &gt;= <span class="number">80</span> <span class="keyword">AND</span> gender = <span class="string">'M'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 分数在80分以上或男生 */</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> score &gt;= <span class="number">80</span> <span class="keyword">OR</span> gender = <span class="string">'M'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不是2班的学生 */</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">NOT</span> class_id = <span class="number">2</span>;</span><br><span class="line">=&gt;SELECT * FROM students WHERE class_id &lt;&gt; 2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 多条件查询 */</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> (score &lt; <span class="number">80</span> <span class="keyword">OR</span> score &gt; <span class="number">90</span>) <span class="keyword">AND</span> gender = <span class="string">'M'</span>;</span><br></pre></td></tr></table></figure><h3 id="投影查询"><a href="#投影查询" class="headerlink" title="投影查询"></a>投影查询</h3><p>使用SELECT返回指定列，这种操作称为投影。SELECT语句可以对结果集的列进行重命名。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 从students表中返回id、score和name这三列 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, score, <span class="keyword">name</span> <span class="keyword">FROM</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 将列名score重命名为points，而id和name列名保持不变 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, score points, <span class="keyword">name</span> <span class="keyword">FROM</span> students;</span><br></pre></td></tr></table></figure></p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>语法：<code>ORDER BY</code><br>升序：<code>ASC</code>，默认升序<br>降序：<code>DESC</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 按score从低到高 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score; </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 按score从高到低 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 如果score列有相同的数据，进一步按gender排序 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score <span class="keyword">FROM</span> students <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>, gender;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 带WHERE条件的ORDER BY:ORDER BY子句要放到WHERE子句后面，这样，结果集仅包含符合WHERE条件的记录，并按照ORDER BY的设定排序。 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">WHERE</span> class_id = <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><ul><li>语法：<code>LIMIT &lt;M&gt; OFFSET &lt;N&gt;</code></li><li>LIMIT：<code>pageSize</code>  </li><li>OFFSET：<code>pageSize * (pageIndex - 1)</code>，OFFSET超过了查询的最大数量并不会报错，而是得到一个空的结果集。</li><li>在MySQL中，<code>LIMIT 15 OFFSET 30</code>还可以简写成<code>LIMIT 30, 15</code>。 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 每页3条记录(LIMIT 3)，要获取第n页的记录(OFFSET (n-1)*3) */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">id</span>, <span class="keyword">name</span>, gender, score</span><br><span class="line"><span class="keyword">FROM</span> students</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">3</span> <span class="keyword">OFFSET</span> <span class="number">0</span>; <span class="comment">/* 第1页 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*LIMIT 3 OFFSET 3;  第2页 </span></span><br><span class="line"><span class="comment">  LIMIT 3 OFFSET 6;  第3页</span></span><br><span class="line"><span class="comment">  LIMIT 3 OFFSET 9;  第4页 */</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><ul><li>COUNT:表示查询的行数</li><li>SUM    计算某一列的合计值，该列必须为数值类型</li><li>AVG    计算某一列的平均值，该列必须为数值类型</li><li>MAX    计算某一列的最大值，不限于数值类型</li><li><p>MIN    计算某一列的最小值，不限于数值类型<br><code>注:</code>如果聚合查询的<code>WHERE</code>条件没有匹配到任何行，<code>COUNT()</code>会返回0，而<code>MAX()</code>、<code>MIN()</code>、<code>MAX()</code>和<code>MIN()</code>会返回<code>NULL</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 查询students表一共有多少条记录,返回结果仍然是一个二维表，只是这个二维表只有一行一列，并且列名是COUNT(*) */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用聚合查询并设置结果集的列名为num */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">num</span> <span class="keyword">FROM</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 统计男生人数 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) boys <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> gender = <span class="string">'M'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算男生平均成绩 */</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(score) average <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> gender = <span class="string">'M'</span>;</span><br></pre></td></tr></table></figure></li><li><p>GROUP BY：分组聚合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 统计每个班人数 */</span></span><br><span class="line"><span class="keyword">SELECT</span> class_id, <span class="keyword">COUNT</span>(*) <span class="keyword">num</span> <span class="keyword">FROM</span> students <span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br></pre></td></tr></table></figure></li></ul><p>结果集如下：<br>|class_id|num|<br>|:-:|:-:|<br>|1|4|<br>|2|3|<br>|3|3|</p><p>注：聚合查询的列中，只能放入分组的列。比如我们可以以班级、性别分组计数，但不可以以姓名计数，会得到语法错误。  </p><h3 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h3><ul><li>语法：<code>SELECT * FROM &lt;表1&gt; &lt;表2&gt;</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* students表和classes表的“乘积” */</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students, classes;</span><br></pre></td></tr></table></figure></li></ul><p>以上乘积查询存在问题：</p><ul><li>结果集是目标表的行数乘积，返回数据量倍增</li><li>存在重复同名列  </li></ul><p>要解决这个问题，可以利用投影查询的“设置列的别名”来给两个表各自的<code>id</code>和<code>name</code>列起别名，如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* students表和classes表的“乘积” */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    students.id <span class="keyword">sid</span>,</span><br><span class="line">    students.name,</span><br><span class="line">    students.gender,</span><br><span class="line">    students.score,</span><br><span class="line">    classes.id cid,</span><br><span class="line">    classes.name cname</span><br><span class="line"><span class="keyword">FROM</span> students, classes;</span><br></pre></td></tr></table></figure></p><p>简略查询表名：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.id <span class="keyword">sid</span>,</span><br><span class="line">    s.name,</span><br><span class="line">    s.gender,</span><br><span class="line">    s.score,</span><br><span class="line">    c.id cid,</span><br><span class="line">    c.name cname</span><br><span class="line"><span class="keyword">FROM</span> students s, classes c;</span><br></pre></td></tr></table></figure></p><p>添加where条件：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* “乘积”条件中同时符合s.gender = 'M'和c.id = 1 */</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    s.id <span class="keyword">sid</span>,</span><br><span class="line">    s.name,</span><br><span class="line">    s.gender,</span><br><span class="line">    s.score,</span><br><span class="line">    c.id cid,</span><br><span class="line">    c.name cname</span><br><span class="line"><span class="keyword">FROM</span> students s, classes c</span><br><span class="line"><span class="keyword">WHERE</span> s.gender = <span class="string">'M'</span> <span class="keyword">AND</span> c.id = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>连接查询是另一种类型的多表查询。<br>对多个表进行<code>JOIN</code>运算，先确定一个主表作为结果集，然后，把其他表的行有选择性地“连接”在主表结果集上。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 选出所有学生，同时返回班级名称 */</span></span><br><span class="line"><span class="keyword">SELECT</span> s.id, s.name, s.class_id, c.name class_name, s.gender, s.score</span><br><span class="line"><span class="keyword">FROM</span> students s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> classes c</span><br><span class="line"><span class="keyword">ON</span> s.class_id = c.id;</span><br></pre></td></tr></table></figure></p><p>注意<code>INNER JOIN</code>查询的写法是：</p><ul><li>确定主表，仍然使用<code>FROM &lt;表1&gt;</code>的语法；</li><li>确定需要连接的表，使用<code>INNER JOIN &lt;表2&gt;</code>的语法；</li><li>确定连接条件，使用<code>ON &lt;条件...&gt;</code>，这里的条件是<code>s.class_id = c.id</code>，表示<code>students</code>表的<code>class_id</code>列与<code>classes</code>表的<code>id</code>列相同的行需要连接；</li><li>可选：加上<code>WHERE</code>子句、<code>ORDER BY</code>等子句。</li></ul><p>几种连接：</p><ul><li><p><code>INNER JOIN</code>：选出两张表都存在的记录<br>由于<code>students</code>表的<code>class_id</code>包含1，2，3，<code>classes</code>表的<code>id</code>包含<code>1，2，3，4</code>，所以，<code>INNER JOIN</code>根据条件<code>s.class_id = c.id</code>返回的结果集仅包含<code>1，2，3</code>。</p><p><img src="/2019/02/12/写给自己看的SQL摘抄/1.png"></p></li><li><p><code>LEFT OUTER JOIN</code>：选出左表存在的记录<br>如果我们给<code>students</code>表增加一列，并添加<code>class_id=5</code>，由于<code>classes</code>表并不存在<code>id=5</code>的列，所以，<code>LEFT OUTER JOIN</code>的结果会增加一列，对应的<code>class_name</code>是<code>NULL</code></p><p><img src="/2019/02/12/写给自己看的SQL摘抄/2.png"></p></li><li><p><code>RIGHT OUTER JOIN</code>：选出右表存在的记录<br>如果某一行仅在右表存在，那么结果集就会以NULL填充剩下的字段。</p><p><img src="/2019/02/12/写给自己看的SQL摘抄/3.png"></p></li><li><p><code>FULL OUTER JOIN</code>：选出左右表都存在的记录</p><p><img src="/2019/02/12/写给自己看的SQL摘抄/4.png"></p></li></ul><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><h3 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h3><ul><li>语法：<code>INSERT INTO &lt;表名&gt; (字段1, 字段2, ...) VALUES (值1, 值2, ...);</code><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'大宝'</span>, <span class="string">'M'</span>, <span class="number">87</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'二宝'</span>, <span class="string">'M'</span>, <span class="number">81</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><ul><li><p>语法：<code>UPDATE &lt;表名&gt; SET 字段1=值1, 字段2=值2, ... WHERE ...;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> <span class="keyword">name</span>=<span class="string">'小牛'</span>, score=<span class="number">77</span> <span class="keyword">WHERE</span> <span class="keyword">id</span>&gt;=<span class="number">5</span> <span class="keyword">AND</span> <span class="keyword">id</span>&lt;=<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 还可以用表达式，把所有80分以下的同学的成绩加10分 */</span></span><br><span class="line"><span class="keyword">UPDATE</span> students <span class="keyword">SET</span> score=score+<span class="number">10</span> <span class="keyword">WHERE</span> score&lt;<span class="number">80</span>;</span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3></li><li><p>语法：<code>DELETE FROM &lt;表名&gt; WHERE ...;</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 删除id=5,6,7的记录 */</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> <span class="keyword">id</span>&gt;=<span class="number">5</span> <span class="keyword">AND</span> <span class="keyword">id</span>&lt;=<span class="number">7</span>;</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>如果<code>WHERE</code>条件没有匹配到任何记录，<code>DELETE</code>语句不会报错，也不会有任何记录被删除</li><li><code>DELETE</code>语句可不加<code>WHERE</code>，不带<code>WHERE</code>条件的<code>DELETE</code>语句会删除整个表的数据，要谨慎使用</li></ul><h2 id="MySQL操作"><a href="#MySQL操作" class="headerlink" title="MySQL操作"></a>MySQL操作</h2><p>###管理MySQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 显示现有数据库 */</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建一个新数据库 */</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> DBName;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除一个数据库 */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> DBName;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 切换数据库 */</span></span><br><span class="line"><span class="keyword">USE</span> DBName;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 列出当前数据库的所有表 */</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLES</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 查看一个表的结构 */</span></span><br><span class="line">DESC students;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 命令查看创建表的SQL语句 */</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 删除表 */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> students;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 修改表--新增列 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> birth <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">/* 修改表--修改列 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">CHANGE</span> <span class="keyword">COLUMN</span> birth birthday <span class="built_in">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">/* 修改表--删除列 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> students <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> birthday;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 退出MySQL */</span></span><br><span class="line">EXIT</span><br></pre></td></tr></table></figure></li></ul><h2 id="实用SQL语句"><a href="#实用SQL语句" class="headerlink" title="实用SQL语句"></a>实用SQL语句</h2><h3 id="插入或替换"><a href="#插入或替换" class="headerlink" title="插入或替换"></a>插入或替换</h3><p>如果记录已经存在，就先删除原记录，再插入新记录，反之直接插入记录。<br>使用<code>REPLACE</code>语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REPLACE</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'小明'</span>, <span class="string">'F'</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure></p><p>若id=1的记录不存在，REPLACE语句将插入新记录，否则，当前id=1的记录将被删除，然后再插入新记录。</p><h3 id="插入或更新"><a href="#插入或更新" class="headerlink" title="插入或更新"></a>插入或更新</h3><p>如果记录已经存在，就更新该记录，反之直接插入记录。<br>使用<code>INSERT INTO ... ON DUPLICATE KEY UPDATE ...</code>语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) </span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'小明'</span>, <span class="string">'F'</span>, <span class="number">99</span>) </span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">DUPLICATE</span> <span class="keyword">KEY</span> </span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">name</span>=<span class="string">'小明'</span>, gender=<span class="string">'F'</span>, score=<span class="number">99</span>;</span><br></pre></td></tr></table></figure></p><p>若id=1的记录不存在，INSERT语句将插入新记录，否则，当前id=1的记录将被更新，更新的字段由UPDATE指定。</p><h3 id="插入或忽略"><a href="#插入或忽略" class="headerlink" title="插入或忽略"></a>插入或忽略</h3><p>如果记录已经存在，就啥事也不干直接忽略，反之直接插入记录。<br>使用<code>INSERT IGNORE INTO ...</code>语句<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">IGNORE</span> <span class="keyword">INTO</span> students (<span class="keyword">id</span>, class_id, <span class="keyword">name</span>, gender, score) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">'小明'</span>, <span class="string">'F'</span>, <span class="number">99</span>);</span><br></pre></td></tr></table></figure></p><p>若id=1的记录不存在，INSERT语句将插入新记录，否则，不执行任何操作。</p><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>对一个表进行快照，即复制一份当前表的数据到一个新表，可以结合<code>CREATE TABLE</code>和<code>SELECT</code><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对class_id=1的记录进行快照，并存储为新表students_of_class1</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students_of_class1 <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> students <span class="keyword">WHERE</span> class_id=<span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><p>新创建的表结构和SELECT使用的表结构完全一致。</p><h3 id="写入查询结果集"><a href="#写入查询结果集" class="headerlink" title="写入查询结果集"></a>写入查询结果集</h3><p>如果查询结果集需要写入到表中，可以结合INSERT和SELECT，将SELECT语句的结果集直接插入到指定表中。<br>例如，创建一个统计成绩的表statistics，记录各班的平均成绩：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">statistics</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    class_id <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    average <span class="keyword">DOUBLE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>然后，我们就可以用一条语句写入各班的平均成绩：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">statistics</span> (class_id, average) </span><br><span class="line"><span class="keyword">SELECT</span> class_id, <span class="keyword">AVG</span>(score) </span><br><span class="line"><span class="keyword">FROM</span> students </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> class_id;</span><br></pre></td></tr></table></figure></p><p>确保INSERT语句的列和SELECT语句的列能一一对应，就可以在statistics表中直接保存查询的结果：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt; select * from statistics;</span><br><span class="line">+<span class="comment">----+----------+--------------+</span></span><br><span class="line">| id | class_id | average      |</span><br><span class="line">+<span class="comment">----+----------+--------------+</span></span><br><span class="line">|  1 |        1 |         86.5 |</span><br><span class="line">|  2 |        2 | 73.666666666 |</span><br><span class="line">|  3 |        3 | 88.333333333 |</span><br><span class="line">+<span class="comment">----+----------+--------------+</span></span><br><span class="line">3 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文来源于廖雪峰的SQL教程，由于是写给自己看的知识点汇总，所以简单的介绍类文字可能就不介绍了，直接上干货。&lt;br&gt;点击&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/001508284671805d39d232
      
    
    </summary>
    
      <category term="Front-End Learning" scheme="cassielala.top/categories/Front-End-Learning/"/>
    
      <category term="DataBase" scheme="cassielala.top/categories/Front-End-Learning/DataBase/"/>
    
    
      <category term="Front-End Learning" scheme="cassielala.top/tags/Front-End-Learning/"/>
    
      <category term="ag-Grid" scheme="cassielala.top/tags/ag-Grid/"/>
    
      <category term="DataBase" scheme="cassielala.top/tags/DataBase/"/>
    
  </entry>
  
  <entry>
    <title>计时器：setTimeout, setInterval</title>
    <link href="cassielala.top/2019/02/11/%E8%AE%A1%E6%97%B6%E5%99%A8%EF%BC%9AsetTimeout-setInterval/"/>
    <id>cassielala.top/2019/02/11/计时器：setTimeout-setInterval/</id>
    <published>2019-02-12T03:05:00.000Z</published>
    <updated>2019-02-12T03:26:38.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="异步执行由来"><a href="#异步执行由来" class="headerlink" title="异步执行由来"></a>异步执行由来</h2><p>&emsp;&emsp;由于JS是单线程，同一时间只能执行一个任务。当同时发起多个任务时根据任务发起先后顺序需要排队，后续任务必须等到前一个任务结束才能开始执行。为了避免因为某些长时间任务造成的无意义等待，JS引入了异步的概念，用另一个线程来管理异步任务。<br>&emsp;&emsp;同步任务直接在主线程队列中顺序执行，而异步任务会进入另一个任务队列，不会阻塞主线程。等到主线程队列空了（执行完了）的时候，就会去异步队列查询是否有可执行的异步任务了（异步任务通常进入异步队列之后还要等一些条件才能执行，如ajax请求、文件读写），如果某个异步任务可以执行了便加入主线程队列，以此循环。<br>&emsp;&emsp;JS中的计时器使用的就是异步操作。接下来我们分别看看<code>setInterval</code>和<code>setTimeout</code>的用法。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li><p>语法  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> intervalID = setInterval(code, delay);  </span><br><span class="line"><span class="keyword">var</span> intervalID = setTimeout(code, delay);</span><br></pre></td></tr></table></figure></li><li><p>参数解释    </p></li></ul><table><thead><tr><th style="text-align:left">参数</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">intervalID</td><td style="text-align:left">定时器id，标识该定时器</td></tr><tr><td style="text-align:left">func</td><td style="text-align:left">执行函数，其中<code>setInterval()</code>是按照指定的delay时间来调用函数或计算表达式。方法会不停地调用函数，直到定时器被关闭。而<code>setTimeout()</code>是在delay毫秒数<strong>后</strong>调用函数或计算表达式。</td></tr><tr><td style="text-align:left">delay</td><td style="text-align:left">延迟的毫秒数 (一秒等于1000毫秒)</td></tr></tbody></table><h2 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h2>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>setTimeout<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>setTimeout：<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span>三秒后显示3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</span></span><br><span class="line"><span class="xml">            content.innerHTML = "<span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span>";</span></span><br><span class="line"><span class="undefined">        &#125;,3000);</span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  3秒后，span中的内容就变成了3。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>setInterval<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>setInterval<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span>计时<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> i = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> time = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</span></span><br><span class="line"><span class="javascript">            content.innerHTML = <span class="string">"&lt;div&gt;"</span>+(i++)+<span class="string">"&lt;/div&gt;"</span>;</span></span><br><span class="line"><span class="undefined">        &#125;,1000);</span></span><br><span class="line"><span class="undefined">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 1秒后，span中的内容从0开始计时。</p><h2 id="setTimeout传参数问题"><a href="#setTimeout传参数问题" class="headerlink" title="setTimeout传参数问题"></a>setTimeout传参数问题</h2><p> 由于<code>setTimeout</code>的属于异步，有时配合点击事件或指定问题会取不到值，所以，接下来我们看一个传参问题。<br> 点击<a href="https://blog.csdn.net/huanglan513/article/details/5669912" target="_blank" rel="noopener">setTimeout传参数问题</a>查看原文。<br> 废话不多说，直接上代码。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>setTimeout<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>setTimeout<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"stopBtn"</span> <span class="attr">onclick</span>=<span class="string">"timeClick(this)"</span>&gt;</span>stop<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> i = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*var stopBtn = document.getElementById('stopBtn');*/</span></span></span><br><span class="line"><span class="javascript">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</span></span><br><span class="line"><span class="javascript">            content.innerHTML = <span class="string">"&lt;div&gt;setTimeout"</span>+(i++)+<span class="string">"&lt;/div&gt;"</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"setTimeout"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;,1000);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> time = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> content = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>);</span></span><br><span class="line"><span class="javascript">            content.innerHTML = <span class="string">"&lt;div&gt;setInterval"</span>+(i++)+<span class="string">"&lt;/div&gt;"</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"setInterval"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;,1000);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">       /*stopBtn.onclick = function()&#123;</span></span><br><span class="line"><span class="undefined">          clearInterval(time);</span></span><br><span class="line"><span class="undefined">       &#125;*/</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="function"><span class="keyword">function</span> <span class="title">timeClick</span>(<span class="params">obj</span>) </span>&#123;        </span></span><br><span class="line"><span class="javascript">           obj.style.backgroundColor=<span class="string">"gray"</span>;;    </span></span><br><span class="line"><span class="javascript">           obj.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span></span><br><span class="line"><span class="undefined">               clearInterval(time);</span></span><br><span class="line"><span class="undefined">            &#125; </span></span><br><span class="line"><span class="javascript">           setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;resetbgColor(obj);&#125;,<span class="number">3000</span>);    </span></span><br><span class="line"><span class="undefined">       &#125;    </span></span><br><span class="line"><span class="undefined">           </span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">resetbgColor</span>(<span class="params">obj</span>) </span>&#123;    </span></span><br><span class="line"><span class="javascript">            obj.style.backgroundColor=<span class="string">""</span>;     </span></span><br><span class="line"><span class="javascript">            obj.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;    </span></span><br><span class="line"><span class="javascript">                timeClick(<span class="keyword">this</span>);    </span></span><br><span class="line"><span class="undefined">            &#125;;    </span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如图：左边为按钮点击前，右边为按钮点击后，三秒后按钮背景色恢复。</p><div style="display:flex;"><br>  <img src="/2019/02/11/计时器：setTimeout-setInterval/btnClick1.jpg" style="margin-right:15px;"><br>  <img src="/2019/02/11/计时器：setTimeout-setInterval/btnClick2.jpg"><br></div><h2 id="定时器清除：clearTimeout-、clearInterval"><a href="#定时器清除：clearTimeout-、clearInterval" class="headerlink" title="定时器清除：clearTimeout()、clearInterval()"></a>定时器清除：clearTimeout()、clearInterval()</h2><p><code>clearTimeout()</code>、<code>clearclearInterval()</code>分别对应<code>setTimeout()</code>和<code>setInterval()</code>，取消对应的定时器。上例中有体现，这里不再赘述，但要注意关闭指定定时器的id，避免重新启动定时器导致定时出错。<br>注：</p><ul><li>HTML5标准规定，<code>setTimeout</code>的最短时间间隔是4毫秒；<code>setInterval</code>的最短间隔时间是10毫秒，也就是说，小于10毫秒的时间间隔会被调整到10毫秒</li><li>大多数电脑显示器的刷新频率是60HZ，大概相当于每秒钟重绘60次。因此，最平滑的动画效的最佳循环间隔是1000ms/60，约等于16.6ms</li></ul><h2 id="链式调用setTimeout"><a href="#链式调用setTimeout" class="headerlink" title="链式调用setTimeout()"></a>链式调用setTimeout()</h2><p>使用<code>setInterval()</code>的问题在于，定时器代码可能在代码再次被添加到队列之前还没有完成执行，结果导致定时器代码连续运行好几次，而之间没有任何停顿。<br>而javascript引擎对这个问题的解决是：当使用<code>setInterval()</code>时，仅当没有该定时器的任何其他代码实例时，才将定时器代码添加到队列中。这确保了定时器代码加入到队列中的最小时间间隔为指定间隔。<br>这样会导致两个问题：</p><ul><li>某些间隔被跳过</li><li>多个定时器的代码执行之间的间隔可能比预期的小  </li></ul><p>为解决上述问题，可采取链式调用<code>setTimeout()</code>方法。如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    setTimeout(fn,interval);</span><br><span class="line">&#125;,interval);</span><br></pre></td></tr></table></figure></p><p>这个模式链式调用了setTimeout()，每次函数执行的时候都会创建一个新的定时器。第二个setTimeout()调用当前执行的函数，并为其设置另外一个定时器。这样做的好处是，在前一个定时器代码执行完之前，不会向队列插入新的定时器代码，确保不会有任何缺失的间隔。而且，它可以保证在下一次定时器代码执行之前，至少要等待指定的间隔，避免了连续的运行。<br>接下来，我们来看<code>setInterval()</code>和链式调用<code>setTimeout()</code>来实现同一个效果的两种方式。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用setInterval()--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 100px;background-color: pink;position:absolute;left:0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">myDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">parseInt</span>(myDiv.style.left) &gt; <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="undefined">            clearInterval(timer);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        myDiv.style.left = <span class="built_in">parseInt</span>(myDiv.style.left) + <span class="number">5</span> + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="undefined">    &#125;,16);    </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--链式调用setTimeout()--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 100px;background-color: pink;position:absolute;left:0;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">myDiv.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">parseInt</span>(myDiv.style.left) &lt;= <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="undefined">            setTimeout(fn,16);    </span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        myDiv.style.left = <span class="built_in">parseInt</span>(myDiv.style.left) + <span class="number">5</span> + <span class="string">'px'</span>;    </span></span><br><span class="line"><span class="undefined">    &#125;,16);    </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>效果：点击如下方块时，方块从左往右移动205px；  </p><div><br>  <img src="/2019/02/11/计时器：setTimeout-setInterval/pink1.jpg"><br>  <img src="/2019/02/11/计时器：setTimeout-setInterval/pink2.jpg"><br></div><p>本文参考文章：</p><blockquote><p><a href="https://blog.csdn.net/huanglan513/article/details/5669912" target="_blank" rel="noopener">setTimeout传参数问题</a><br><a href="https://www.cnblogs.com/xiaohuochai/p/5773183.html" target="_blank" rel="noopener">深入理解定时器系列第一篇——理解setTimeout和setInterval</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;异步执行由来&quot;&gt;&lt;a href=&quot;#异步执行由来&quot; class=&quot;headerlink&quot; title=&quot;异步执行由来&quot;&gt;&lt;/a&gt;异步执行由来&lt;/h2&gt;&lt;p&gt;&amp;emsp;&amp;emsp;由于JS是单线程，同一时间只能执行一个任务。当同时发起多个任务时根据任务发起先后顺序
      
    
    </summary>
    
      <category term="Front-End Learning" scheme="cassielala.top/categories/Front-End-Learning/"/>
    
      <category term="JavaScript" scheme="cassielala.top/categories/Front-End-Learning/JavaScript/"/>
    
    
      <category term="Front-End Learning" scheme="cassielala.top/tags/Front-End-Learning/"/>
    
      <category term="JavaScript" scheme="cassielala.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>阮一峰前端技术栈教程</title>
    <link href="cassielala.top/2019/01/30/%E6%8A%80%E6%9C%AF%E6%A0%88/"/>
    <id>cassielala.top/2019/01/30/技术栈/</id>
    <published>2019-01-30T09:31:00.000Z</published>
    <updated>2019-01-30T09:52:20.104Z</updated>
    
    <content type="html"><![CDATA[<ul><li>ES6 语法:<a href="https://link.jianshu.com?t=http://es6.ruanyifeng.com/" target="_blank" rel="noopener">点击查看</a></li><li>Babel：<a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2016/01/babel.html" target="_blank" rel="noopener">点击查看</a></li><li>React：<a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2015/03/react.html" target="_blank" rel="noopener">点击查看</a>&emsp;<a href="https://link.jianshu.com?t=https://github.com/ruanyf/react-demos" target="_blank" rel="noopener">示例库</a></li><li>Webpack：<a href="https://link.jianshu.com?t=https://github.com/ruanyf/webpack-demos" target="_blank" rel="noopener">点击查看</a></li><li>React 项目脚手架：<a href="https://link.jianshu.com?t=https://github.com/ruanyf/react-babel-webpack-boilerplate" target="_blank" rel="noopener">点击查看</a></li><li>Flex 布局：<a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">点击查看</a>&emsp;<a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">示例</a></li><li>CSS Modules：<a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2016/06/css_modules.html" target="_blank" rel="noopener">点击查看</a>&emsp;<a href="https://link.jianshu.com?t=https://github.com/ruanyf/css-modules-demos" target="_blank" rel="noopener">示例库</a></li><li>React-Router：<a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2016/05/react_router.html" target="_blank" rel="noopener">点击查看</a>&emsp;<a href="https://link.jianshu.com?t=https://github.com/reactjs/react-router-tutorial/tree/master/lessons" target="_blank" rel="noopener">示例库</a></li><li>Flux 架构：<a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2016/01/flux.html" target="_blank" rel="noopener">点击查看</a><br>&emsp;<a href="https://link.jianshu.com?t=http://es6.ruanyifeng.com/" target="_blank" rel="noopener">示例库</a></li><li>Redux 架构：<a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html" target="_blank" rel="noopener">教程一</a>&emsp;<a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="noopener">教程二</a>&emsp;<a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_three_react-redux.html" target="_blank" rel="noopener">教程三</a></li><li>Mocha 测试框架：<a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2015/12/a-mocha-tutorial-of-examples.html" target="_blank" rel="noopener">点击查看</a>&emsp;<a href="https://link.jianshu.com?t=https://github.com/ruanyf/mocha-demos" target="_blank" rel="noopener">示例库</a></li><li>Istanbul 覆盖率框架：<a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2015/06/istanbul.html" target="_blank" rel="noopener">点击查看</a></li><li>React 单元测试：<a href="https://link.jianshu.com?t=http://www.ruanyifeng.com/blog/2016/02/react-testing-tutorial.html" target="_blank" rel="noopener">点击查看</a>&emsp;<a href="https://link.jianshu.com?t=https://github.com/ruanyf/react-testing-demo" target="_blank" rel="noopener">示例库</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;ES6 语法:&lt;a href=&quot;https://link.jianshu.com?t=http://es6.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Babel：&lt;a hr
      
    
    </summary>
    
      <category term="Front-End Learning" scheme="cassielala.top/categories/Front-End-Learning/"/>
    
      <category term="Else" scheme="cassielala.top/categories/Front-End-Learning/Else/"/>
    
    
      <category term="Front-End Learning" scheme="cassielala.top/tags/Front-End-Learning/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法小记</title>
    <link href="cassielala.top/2019/01/29/markdown%E8%AF%AD%E6%B3%95%E5%B0%8F%E8%AE%B0/"/>
    <id>cassielala.top/2019/01/29/markdown语法小记/</id>
    <published>2019-01-29T06:36:44.000Z</published>
    <updated>2019-01-29T06:42:50.939Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>h1~h6对应： <code>#</code>数量决定标题等级。还可以用<code>=</code>在文字下表示，但局限只有两级。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># h1</span><br><span class="line">## h2</span><br><span class="line">### h3</span><br><span class="line">#### h4</span><br><span class="line">##### h5</span><br><span class="line">###### h6  </span><br><span class="line">一级标题</span><br><span class="line">===</span><br><span class="line">二级标题</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>显示如下：<br><img src="/2019/01/29/markdown语法小记/title.jpg" width="500px" height="300px" style="margin: 0;"></p><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用的文字</span><br><span class="line">&gt;&gt;  引用的文字</span><br></pre></td></tr></table></figure><p>大于号越多，引用的层级越多，上述代码显示效果如下：</p><blockquote><p>引用的文字</p><blockquote><p> 引用的文字</p></blockquote></blockquote><h3 id="链接或图片"><a href="#链接或图片" class="headerlink" title="链接或图片"></a>链接或图片</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[点击跳转至百度](http://www.baidu.com)</span><br><span class="line">![图片](http://cassielala.top/images/logo.jpg)</span><br></pre></td></tr></table></figure><p>显示效果如下：<br><a href="http://www.baidu.com" target="_blank" rel="noopener">点击跳转至百度</a><br>&nbsp;&nbsp;<br><img src="http://cassielala.top/images/logo.jpg" width="200px" height="200px" style="margin: 0;"> </p><h3 id="hexo插入本地图片"><a href="#hexo插入本地图片" class="headerlink" title="hexo插入本地图片"></a>hexo插入本地图片</h3><p>使用hexo的时候因为要插入本地图片遇到了问题，特此写来记录，希望能够帮助到大家。</p><ul><li>首先将hexo把主页的配置文件<code>_config.yml</code> 里的<code>post_asset_folder:</code>这个选项设置为<code>true</code></li><li>hexo目录下执行<code>npm install hexo-asset-image --save</code></li><li>完成后再new新的md文件的时候就能在<code>/source/_posts</code>下找到同名文件夹，将要放的图片丢进去对应的文件夹。</li><li>md文件中引入的时候使用<code>![xxx](xxx/xxx.png)</code>即可 </li></ul><p>本来到这里应该就万事大吉了，但是嘞，我的图片依旧无法显示，后来经过我一系列的搜索，终于找到了问题的解决方案。<br><strong>问题：</strong><br>图片依然无法显示的原因是<code>hexo3</code>版本更新后对很多插件支持有问题，<code>hexo-asset-image</code>插件在处理<code>data.permalink</code>链接时出现路径错误，把年月去掉了，导致最后生成的路径为<code>%d/xxx/xxx</code>。<br><strong>做法：</strong>  </p><ul><li>找到插件<code>hexo-asset-image</code>,通过判断当前版本是否等于3的版本做不同的路径分割，一般插件在<code>/node_modules/</code>目录下。</li><li><p>修改代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可在方法上添加该变量</span></span><br><span class="line"><span class="keyword">var</span> version = <span class="built_in">String</span>(hexo.version).split(<span class="string">'.'</span>);</span><br><span class="line"><span class="comment">//修改“data.permalink”</span></span><br><span class="line"><span class="keyword">var</span> link = data.permalink;  </span><br><span class="line"><span class="keyword">if</span>(version.length &gt; <span class="number">0</span> &amp;&amp; <span class="built_in">Number</span>(version[<span class="number">0</span>]) == <span class="number">3</span>) </span><br><span class="line">    <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">1</span>) + <span class="number">1</span>; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="keyword">var</span> beginPos = getPosition(link, <span class="string">'/'</span>, <span class="number">3</span>) + <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>md文件使用时直接写照片名即可。</p></li><li>修改完成保存，重新生成静态文件即可：<code>![xxx](xxx.png)</code>。</li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li>无序列表使用<code>*</code>、<code>+</code>、<code>-</code>标识</li><li>有序列表使用数字加<code>.</code>标识，例如：<code>1.</code></li><li>可嵌套使用，<code>回车</code>+<code>tab</code>即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">* 黄瓜</span><br><span class="line">* 玉米</span><br><span class="line">* 茄子</span><br><span class="line"></span><br><span class="line">+ 黄瓜</span><br><span class="line">+ 玉米</span><br><span class="line">+ 茄子</span><br><span class="line"></span><br><span class="line">- 黄瓜</span><br><span class="line">- 玉米</span><br><span class="line">- 茄子</span><br><span class="line"></span><br><span class="line">1. 黄瓜</span><br><span class="line">2. 玉米</span><br><span class="line">3. 茄子</span><br><span class="line"></span><br><span class="line">- 黄瓜</span><br><span class="line">  - 水果黄瓜</span><br><span class="line">  - 小黄瓜</span><br><span class="line">- 玉米</span><br><span class="line">  - 紫玉米</span><br><span class="line">  - 黄玉米</span><br><span class="line">- 茄子</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li>黄瓜</li><li>玉米</li><li>茄子</li></ul><ol><li>黄瓜</li><li>玉米</li><li>茄子</li></ol><ul><li>黄瓜<ul><li>水果黄瓜</li><li>小黄瓜</li></ul></li><li>玉米<ul><li>紫玉米</li><li>黄玉米</li></ul></li><li>茄子</li></ul><p><strong><font color="#a00">注：</font></strong>  </p><ul><li>如果在单一列表项中包含了多个段落，为了保证渲染正常，*与段落首字母之间必须保留四个空格。</li><li>如果在列表中加入了区块引用，区域引用标记符也需要缩进4个空格  </li></ul><p>反正记住一个原则，如果在和列表配合使用的时候出现了问题，就缩进一次，四个空格或者一个制表符代表一次缩进。如果一次缩进没有解决问题，那就两次。</p><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>使用<code>*</code>或<code>-</code>即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>效果如下：  </p><hr><hr><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*这里是斜体*</span><br><span class="line">_这里是斜体_</span><br><span class="line"></span><br><span class="line">**这里是加粗**</span><br><span class="line">__这里是加粗__</span><br></pre></td></tr></table></figure><p>效果如下：<br><em>这里是斜体</em><br><em>这里是斜体</em><br><strong>这里是加粗</strong><br><strong>这里是加粗</strong></p><h3 id="插入代码块"><a href="#插入代码块" class="headerlink" title="插入代码块"></a>插入代码块</h3><p>使用两排的“<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">\```java</span><br><span class="line">XXXXXX</span><br><span class="line">```\</span><br></pre></td></tr></table></figure></p><h3 id="插入表格"><a href="#插入表格" class="headerlink" title="插入表格"></a>插入表格</h3><p>其中第一行表头，第二行定义排列方式，<code>:</code>居<code>--</code>坐边即左对齐，居右则右对齐，两边都有则居中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">表头|条目一|条目二</span><br><span class="line">:---:|:---:|:---:</span><br><span class="line">项目|项目一|项目二</span><br></pre></td></tr></table></figure></p><p>效果如下：  </p><table><thead><tr><th style="text-align:center">表头</th><th style="text-align:center">条目一</th><th style="text-align:center">条目二</th></tr></thead><tbody><tr><td style="text-align:center">项目</td><td style="text-align:center">项目一</td><td style="text-align:center">项目二</td></tr></tbody></table><h3 id="符号处理"><a href="#符号处理" class="headerlink" title="符号处理"></a>符号处理</h3><p><strong>转译多加一个<code>/</code></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜线</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  花括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括弧</span><br><span class="line">#   井字号</span><br><span class="line">+   加号</span><br><span class="line">-   减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure></p><h2 id="支持高亮语言"><a href="#支持高亮语言" class="headerlink" title="支持高亮语言"></a>支持高亮语言</h2><table><thead><tr><th style="text-align:left">名称</th><th style="text-align:left">关键字</th><th style="text-align:left">名称</th><th style="text-align:left">关键字</th></tr></thead><tbody><tr><td style="text-align:left">AppleScript</td><td style="text-align:left">applescript</td><td style="text-align:left">ActionScript 3.0</td><td style="text-align:left">actionscript3, as3</td></tr><tr><td style="text-align:left">Shell</td><td style="text-align:left">bash , shell</td><td style="text-align:left">ColdFusion</td><td style="text-align:left">coldfusion,cf</td></tr><tr><td style="text-align:left">C</td><td style="text-align:left">cpp , c</td><td style="text-align:left">C#</td><td style="text-align:left">c# , c-sharp , csharp    </td></tr><tr><td style="text-align:left">CSS</td><td style="text-align:left">css</td><td style="text-align:left">Delphi</td><td style="text-align:left">delphi , pascal , pas    </td></tr><tr><td style="text-align:left">diff&amp;patch</td><td style="text-align:left">diff patch</td><td style="text-align:left">Erlang</td><td style="text-align:left">erl , erlang</td></tr><tr><td style="text-align:left">Groovy</td><td style="text-align:left">groovy</td><td style="text-align:left">Java</td><td style="text-align:left">java</td></tr><tr><td style="text-align:left">JavaFX</td><td style="text-align:left">jfx , javafx</td><td style="text-align:left">JavaScript</td><td style="text-align:left">js , jscript , javascript    </td></tr><tr><td style="text-align:left">Perl</td><td style="text-align:left">perl , pl , Perl</td><td style="text-align:left">PHP</td><td style="text-align:left">php    </td></tr><tr><td style="text-align:left">text</td><td style="text-align:left">text , plain</td><td style="text-align:left">Python</td><td style="text-align:left">py , python    </td></tr><tr><td style="text-align:left">Ruby</td><td style="text-align:left">ruby , rails , ror , rb</td><td style="text-align:left">SASS&amp;SCSS</td><td style="text-align:left">sass , scss</td></tr><tr><td style="text-align:left">Scala</td><td style="text-align:left">scala</td><td style="text-align:left">SQL</td><td style="text-align:left">sql</td></tr><tr><td style="text-align:left">Visual Basic</td><td style="text-align:left">vb , vbnet</td><td style="text-align:left">XML</td><td style="text-align:left">xml , xhtml , xslt , html</td></tr><tr><td style="text-align:left">Objective C</td><td style="text-align:left">objc , obj-c</td><td style="text-align:left">F#</td><td style="text-align:left">f# f-sharp , fsharp        </td></tr><tr><td style="text-align:left"></td><td style="text-align:left">xpp , dynamics-xpp</td><td style="text-align:left">R</td><td style="text-align:left">r , s , splus</td></tr><tr><td style="text-align:left">matlab</td><td style="text-align:left">matlab</td><td style="text-align:left">swift</td><td style="text-align:left">swift</td></tr><tr><td style="text-align:left">GO</td><td style="text-align:left">go , golang</td></tr></tbody></table><p>大致介绍就到这里啦，如果有什么新的发现，我会继续更新哒！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;h3 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h
      
    
    </summary>
    
      <category term="Front-End Learning" scheme="cassielala.top/categories/Front-End-Learning/"/>
    
      <category term="Else" scheme="cassielala.top/categories/Front-End-Learning/Else/"/>
    
    
      <category term="Front-End Learning" scheme="cassielala.top/tags/Front-End-Learning/"/>
    
      <category term="Else" scheme="cassielala.top/tags/Else/"/>
    
      <category term="markDown" scheme="cassielala.top/tags/markDown/"/>
    
  </entry>
  
  <entry>
    <title>ag-Grid 超丰富的表格插件（1）——简易使用</title>
    <link href="cassielala.top/2019/01/28/ag-Grid-%E8%B6%85%E4%B8%B0%E5%AF%8C%E7%9A%84%E8%A1%A8%E6%A0%BC%E6%8F%92%E4%BB%B6/"/>
    <id>cassielala.top/2019/01/28/ag-Grid-超丰富的表格插件/</id>
    <published>2019-01-29T03:38:00.000Z</published>
    <updated>2019-01-29T08:11:52.308Z</updated>
    
    <content type="html"><![CDATA[<p>由于最近一直接触的<code>ag-Grid</code>，但是网上的博文却很少见，有些困惑想搜索却找不到答案，不晓得为什嘛，所以想写一些常见的功能介绍，也能和大家一起探讨一下。<br>作为经历过手写table表格的我，ag-Grid带给我的感受简直不要不要的，感觉是一款功能超级丰富表格插件，因为没用过其他什么table表格插件，所以不能说它是最好用的。<br>说不上如何深挖，请叫我亲爱的的翻译官吧，毕竟翻墙是一种痛，每次一个网页加载出来，都不舍得刷新重新了O(∩_∩)O哈哈~。<code>ag-Grid</code>官方文档上有详细的属性、方法说明介绍，且配有案例和代码以及在线编辑功能，十分强大。<br>想看官方网站原址可点击<a href="https://www.ag-grid.com/" target="_blank" rel="noopener">这里</a>查看哦。<br>好吧，接下来让我们看看这个神奇的<code>ag-Grid</code>。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>ag-Grid</code>有两种版本，一个是<code>community</code>，还有一个是企业级的<code>enterprise</code>版本，并不知道干嘛的，我们直接安装<code>ag-Grid</code>就好了。  </p><h3 id="NPM安装"><a href="#NPM安装" class="headerlink" title="NPM安装"></a>NPM安装</h3><p><code>ag-Grid</code>：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save ag-grid</span><br></pre></td></tr></table></figure><p><code>community</code>、<code>enterprise</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save ag-grid-community</span><br><span class="line">npm install --save ag-grid-enterprise</span><br></pre></td></tr></table></figure><h3 id="本地下载"><a href="#本地下载" class="headerlink" title="本地下载"></a>本地下载</h3><p>可点击<a href="https://github.com/ag-grid/ag-grid/tree/master/packages/ag-grid-community" target="_blank" rel="noopener">这里</a>下载源文件直接本地使用  </p><h3 id="头文件引入"><a href="#头文件引入" class="headerlink" title="头文件引入"></a>头文件引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://use.fontawesome.com/releases/v5.6.3/css/all.css"</span>/&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/ag-grid-community@20.0.0/dist/ag-grid-community.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>1、首先，在HTML里添加表格插入的<code>div</code>容器<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myGrid"</span> <span class="attr">style</span>=<span class="string">"height: 150px;width: 600px"</span> <span class="attr">class</span>=<span class="string">"ag-theme-balham"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2、头文件引入表格文件和样式文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Grid&#125; <span class="keyword">from</span> <span class="string">"ag-grid/main"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"ag-grid/dist/styles/ag-grid.css"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"ag-grid/dist/styles/ag-theme-balham.css"</span>;</span><br></pre></td></tr></table></figure></p><p>3、配置表格列和行数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gridOptions = &#123;</span><br><span class="line">columnDefs: [</span><br><span class="line">&#123;<span class="attr">headerName</span>: <span class="string">'Make'</span>, <span class="attr">field</span>: <span class="string">'make'</span>&#125;,</span><br><span class="line">&#123;<span class="attr">headerName</span>: <span class="string">'Model'</span>, <span class="attr">field</span>: <span class="string">'model'</span>&#125;,</span><br><span class="line">&#123;<span class="attr">headerName</span>: <span class="string">'Price'</span>, <span class="attr">field</span>: <span class="string">'price'</span>&#125;</span><br><span class="line">],</span><br><span class="line">rowData: [</span><br><span class="line">&#123;<span class="attr">make</span>: <span class="string">'Toyota'</span>, <span class="attr">model</span>: <span class="string">'Celica'</span>, <span class="attr">price</span>: <span class="number">35000</span>&#125;,</span><br><span class="line">&#123;<span class="attr">make</span>: <span class="string">'Ford'</span>, <span class="attr">model</span>: <span class="string">'Mondeo'</span>, <span class="attr">price</span>: <span class="number">32000</span>&#125;,</span><br><span class="line">&#123;<span class="attr">make</span>: <span class="string">'Porsche'</span>, <span class="attr">model</span>: <span class="string">'Boxter'</span>, <span class="attr">price</span>: <span class="number">72000</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>4、初始化表格<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eGridDiv = <span class="built_in">document</span>.querySelector(<span class="string">'#myGrid'</span>);</span><br><span class="line"><span class="keyword">new</span> Grid(eGridDiv, <span class="keyword">this</span>.gridOptions);</span><br></pre></td></tr></table></figure></p><p>5、大功告成！然后可得到如下表格<br><img src="/2019/01/28/ag-Grid-超丰富的表格插件/table1.jpg" alt="图片"><br>是不是很迅速很过瘾？！！！可能你会说其他很多表格组件也都如此，没什么特别的，不要方，这才刚开始，花式玩表格等着你！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于最近一直接触的&lt;code&gt;ag-Grid&lt;/code&gt;，但是网上的博文却很少见，有些困惑想搜索却找不到答案，不晓得为什嘛，所以想写一些常见的功能介绍，也能和大家一起探讨一下。&lt;br&gt;作为经历过手写table表格的我，ag-Grid带给我的感受简直不要不要的，感觉是一款功
      
    
    </summary>
    
      <category term="Front-End Learning" scheme="cassielala.top/categories/Front-End-Learning/"/>
    
      <category term="Else" scheme="cassielala.top/categories/Front-End-Learning/Else/"/>
    
    
      <category term="Front-End Learning" scheme="cassielala.top/tags/Front-End-Learning/"/>
    
      <category term="好用的插件" scheme="cassielala.top/tags/%E5%A5%BD%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
    
      <category term="ag-Grid" scheme="cassielala.top/tags/ag-Grid/"/>
    
  </entry>
  
  <entry>
    <title>CSS  counter属性</title>
    <link href="cassielala.top/2019/01/28/css/"/>
    <id>cassielala.top/2019/01/28/css/</id>
    <published>2019-01-28T08:39:13.000Z</published>
    <updated>2019-01-28T08:55:55.112Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文引用张鑫旭大大博客文章《CSS counter计数器(content目录序号自动递增)详解》，一直觉得鑫大大是个被程序员耽误的小说家，他的文章风格大都以浅明深，诙谐幽默，可点击<a href="https://www.zhangxinxu.com/wordpress/2014/08/css-counters-automatic-number-content/comment-page-1/#comment-391220" target="_blank" rel="noopener">这里</a>查看原文哦。</p></blockquote><p>好了，It’s my show time!<br>在了解到<code>counter</code>之前，想到计数应该属<code>ul</code>，<code>ol</code>标签元素了吧，但它们的递增规则单一，无法实现自定义的递增。而<code>counter</code>属性完美的解决了这个问题，让我们一起来看看吧。<br>首先，使用一个属性前，我们一定得了解一下它的兼容性，曾经被IE兼容性虐哭的我，不得不小心作为一个好用属性的兼容问题。</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><table><thead><tr><th style="text-align:center">&nbsp;I&nbsp;E&nbsp;&nbsp;</th><th style="text-align:center">Firefox</th><th style="text-align:center">Chrome</th><th style="text-align:center">Safari</th><th style="text-align:center">Opera</th><th style="text-align:center">iOS Safari</th><th style="text-align:center">Android Browser</th><th style="text-align:center">Android Chrome</th></tr></thead><tbody><tr><td style="text-align:center">8.0+</td><td style="text-align:center">2.0+</td><td style="text-align:center">4.0+</td><td style="text-align:center">3.1+</td><td style="text-align:center">3.5+</td><td style="text-align:center">3.2+</td><td style="text-align:center">2.1+</td><td style="text-align:center">18.0+</td></tr></tbody></table><p>&emsp;&emsp;看到这里是不是心里放松了很多，它的兼容性还是可以的接受的，范围不算局限。</p><h2 id="counter的使用题要"><a href="#counter的使用题要" class="headerlink" title="counter的使用题要"></a>counter的使用题要</h2><blockquote><p>CSS计数器只能跟content属性在一起的时候才有作用，而content属性貌似专门用在before/after伪元素上的。于是，就有了，“计数器↔伪元素↔content属性”的铁三角关系</p></blockquote><h2 id="counter成员"><a href="#counter成员" class="headerlink" title="counter成员"></a>counter成员</h2><p>counter的成员主要有三个：</p><ul><li>counter-reset（计数器声明及初始值设置）</li><li>counter-increment（递增规则）</li><li>counter()/counters(计算结果生成)  </li></ul><h3 id="counter-reset"><a href="#counter-reset" class="headerlink" title="counter-reset"></a>counter-reset</h3><p><code>counter-reset</code>主要有三个属性。</p><ul><li><code>none</code>：默认。不能对选择器的计数器进行重置。</li><li><code>name num</code>：<code>name</code>即标记计数器名称，<code>num</code>即记录计数器初始值。<code>num</code>非必写，默认为0。  </li><li><code>inherit</code>：规定应该从父元素继承 counter-reset 属性的值。</li></ul><h3 id="counter-increment"><a href="#counter-increment" class="headerlink" title="counter-increment"></a>counter-increment</h3><p><code>counter-increment</code>主要有三个属性。</p><ul><li><code>none</code>：没有计数器将递增。</li><li><code>name num</code>：<code>name</code>即选择递增的计数器，<code>num</code>即增量。<code>num</code>非必写，默认为1，可以是正数、零或者负数。</li><li><code>inherit</code>：指定counter-increment属性的值，应该从父元素继承。</li></ul><h3 id="counter-counters"><a href="#counter-counters" class="headerlink" title="counter()/counters()"></a>counter()/counters()</h3><p>这是个方法，不是属性。类似CSS3中才calc()计算。</p><ul><li><code>name</code>：选择递增的计数器。</li><li><code>style</code>：递增的数字样式：阿拉伯数字，罗马数字等，具体如下：<blockquote><p>list-style-type：disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none | armenian | cjk-ideographic | georgian | lower-greek | hebrew | hiragana | hiragana-iroha | katakana | katakana-iroha | lower-latin | upper-latin</p></blockquote></li><li><code>string</code>：counters的属性，子序数连接符  </li></ul><p><font color="#a00">注：</font>多个计数器还可同时命名，接下来我们上代码看几个例子。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">CSS</span>：</span><br><span class="line">1. <span class="selector-tag">counter-reset</span>属性</span><br><span class="line"><span class="selector-class">.xxx</span> &#123; </span><br><span class="line">  <span class="attribute">counter-reset</span>: count; <span class="comment">/* 计数器名称是'count', 并且默认起始值为0 */</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.xxx</span> &#123; </span><br><span class="line">  <span class="attribute">counter-reset</span>: count <span class="number">4</span>; <span class="comment">/* 计数器名称是'count', 并且默认起始值为4 */</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.xxx</span> &#123; </span><br><span class="line">  <span class="attribute">counter-reset</span>: count1 <span class="number">2</span> count2 <span class="number">3</span>; <span class="comment">/* 定义两个计数器'count1'和'count2',默认起始值分别为2和3 */</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">2. <span class="selector-tag">counter-increment</span>属性</span><br><span class="line"><span class="selector-class">.counter</span> &#123; </span><br><span class="line">  <span class="attribute">counter-increment</span>: count <span class="number">2</span>; <span class="comment">/*'count'以2阶段递增 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.counter</span> &#123; </span><br><span class="line">  <span class="attribute">counter-increment</span>: count -<span class="number">1</span>;  <span class="comment">/*'count'以1阶段递减 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3. <span class="selector-tag">counter</span>方法</span><br><span class="line"><span class="selector-tag">counters</span>(<span class="selector-tag">name</span>, <span class="selector-tag">style</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.counter</span><span class="selector-pseudo">:before</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(count1) <span class="string">'\A'</span> <span class="built_in">counter</span>(count2);  <span class="comment">/*'\A'使用inline水平元素换行*/</span></span><br><span class="line">  <span class="attribute">white-space</span>: pre; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接下来看一个完整的例子。<br>效果如图：<br><img src="/2019/01/28/css/css-counter_1.jpg" alt="counters例子"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>一级标题</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>二级标题</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>一级标题<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> &#123; </span></span><br><span class="line"><span class="undefined">  counter-reset: counter; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.toper</span>, <span class="selector-class">.inner</span> &#123; </span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#eee</span>; </span></span><br><span class="line"><span class="undefined">  margin-left: 20px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.list</span><span class="selector-pseudo">:before</span>, </span></span><br><span class="line"><span class="css"><span class="selector-class">.toper</span><span class="selector-pseudo">:before</span>,</span></span><br><span class="line"><span class="css"><span class="selector-class">.inner</span><span class="selector-pseudo">:before</span> &#123; </span></span><br><span class="line"><span class="undefined">  counter-increment: counter; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.list</span> &#123;</span></span><br><span class="line"><span class="undefined">  padding-left: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.inner</span><span class="selector-pseudo">:before</span>, </span></span><br><span class="line"><span class="css"><span class="selector-class">.list</span><span class="selector-pseudo">:before</span>, </span></span><br><span class="line"><span class="css"><span class="selector-class">.toper</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="undefined">  content: counters(counter,'.')'、';</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>OK~至此，关于counter的介绍就差不多结束了，可以在实践过程中发现和挖掘更有意思的操作，如果你有什么有趣的神操作，可以给我留言分享哦！啦啦啦~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文引用张鑫旭大大博客文章《CSS counter计数器(content目录序号自动递增)详解》，一直觉得鑫大大是
      
    
    </summary>
    
      <category term="Front-End Learning" scheme="cassielala.top/categories/Front-End-Learning/"/>
    
      <category term="HTML/CSS" scheme="cassielala.top/categories/Front-End-Learning/HTML-CSS/"/>
    
    
      <category term="Front-End Learning" scheme="cassielala.top/tags/Front-End-Learning/"/>
    
      <category term="HTML/CSS" scheme="cassielala.top/tags/HTML-CSS/"/>
    
      <category term="css counter" scheme="cassielala.top/tags/css-counter/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="cassielala.top/2019/01/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>cassielala.top/2019/01/22/正则表达式/</id>
    <published>2019-01-23T02:09:55.000Z</published>
    <updated>2019-01-30T02:08:28.961Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;数据/字符串处理是工作中经常能用到的，以前的做法大都是通过百度然后修改别人的代码完成字符串处理，一直想系统的跟正则认识一番，于是有了这篇。<br>&emsp;&emsp;再次非常感谢雪峰大大和鑫大大的文章支持，点击以下链接可查看原文。<br>&emsp;&emsp;雪峰大大的 <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499503920bb7b42ff6627420da2ceae4babf6c4f2000" target="_blank" rel="noopener">标准对象/RegExp</a>.<br>&emsp;&emsp;鑫大大的 <a href="https://www.zhangxinxu.com/wordpress/2019/01/js-quiz-27/" target="_blank" rel="noopener">粉丝群第27期JS基础小测答疑文字版</a><br>&emsp;&emsp;好的，接下来进入正题啦。  </p><h2 id="正则表达式定义"><a href="#正则表达式定义" class="headerlink" title="正则表达式定义"></a>正则表达式定义</h2><p>&emsp;&emsp;正则表达式是对字符串操作的一种逻辑公式，用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。<br>举个例子：<br>&emsp;&emsp;’00\d’可以匹配’007’，‘008’，其中‘\d’即匹配数字。  </p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table><thead><tr><th style="text-align:center">&nbsp;字&nbsp;符&nbsp;&nbsp;</th><th style="text-align:left">描&nbsp;述</th><th style="text-align:center">&nbsp;反义字符&nbsp;&nbsp;</th><th style="text-align:left">描&nbsp;述</th></tr></thead><tbody><tr><td style="text-align:center">$</td><td style="text-align:left">匹配输入字符串的结尾位置</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">^</td><td style="text-align:left">匹配输入字符串的开始位置</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">.</td><td style="text-align:left">匹配除换行符 \n 之外的任何单字符</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">\b</td><td style="text-align:left">匹配单词边界</td><td style="text-align:center">\B</td><td style="text-align:left">匹配不是单词开头或结束的位置</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:left">匹配数字</td><td style="text-align:center">\D</td><td style="text-align:left">匹配任意非数字的字符</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:left">匹配字母，数字，下划线</td><td style="text-align:center">\W</td><td style="text-align:left">匹配任意不是字母，数字，下划线 的字符</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:left">匹配空格</td><td style="text-align:center">\S</td><td style="text-align:left">匹配任意不是空白符的字符</td></tr><tr><td style="text-align:center">[abc]</td><td style="text-align:left">匹配包含括号内元素的字符</td><td style="text-align:center">[^abc]</td><td style="text-align:left">匹配除了abc以外的任意字符 </td></tr></tbody></table><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><table><thead><tr><th style="text-align:center">&nbsp;字&nbsp;符&nbsp;&nbsp;</th><th style="text-align:left">描&nbsp;述</th><th style="text-align:center">&nbsp;带?字符&nbsp;&nbsp;</th><th style="text-align:left">描&nbsp;述</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:left">重复至少0次</td><td style="text-align:center">*?</td><td style="text-align:left">重复任意次,但尽可能少重复</td></tr><tr><td style="text-align:center">+</td><td style="text-align:left">重复至少1次</td><td style="text-align:center">+?</td><td style="text-align:left">重复至少1次,但尽可能少重复</td></tr><tr><td style="text-align:center">?</td><td style="text-align:left">重复0次或1次</td><td style="text-align:center">??</td><td style="text-align:left">重复0次或1次,但尽可能少重复</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:left">重复n次</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:left">重复至少n次</td><td style="text-align:center">{n,}?</td><td style="text-align:left">重复至少n次,但尽可能少重复</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:left">重复n-m次</td><td style="text-align:center">{n,m}?</td><td style="text-align:left">重复n-m次,但尽可能少重复</td></tr></tbody></table><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><table><thead><tr><th style="text-align:center">&nbsp;字&nbsp;符&nbsp;&nbsp;</th><th style="text-align:left">描&nbsp;述</th><th style="text-align:center">&nbsp;字&nbsp;符&nbsp;&nbsp;</th><th style="text-align:left">描&nbsp;述</th></tr></thead><tbody><tr><td style="text-align:center">\cx</td><td style="text-align:left">匹配由x指明的控制字符。</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">\f</td><td style="text-align:left">匹配一个换页符。等价于 \x0c 和 \cL。</td><td style="text-align:center">( )</td><td style="text-align:left">标记一个子表达式的开始和结束位置。</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:left">匹配一个换行符。等价于 \x0a 和 \cJ。</td><td style="text-align:center">&#124;</td><td style="text-align:left">指明两项之间的一个选择，或</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:left">匹配一个回车符。等价于 \x0d 和 \cM。</td><td style="text-align:center">[</td><td style="text-align:left">标记一个中括号表达式的开始</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:left">匹配任何空白字符，包括空格、制表符、换页符等等。</td><td style="text-align:center">\</td><td style="text-align:left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td><td style="text-align:center">{</td><td style="text-align:left">标记限定符表达式的开始。</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:left">匹配一个制表符。等价于 \x09 和 \cI。</td><td style="text-align:center">\v</td><td style="text-align:left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><ul><li>数字、字母匹配（<code>\d</code>匹配数字，<code>\w</code>匹配任意字母，数字，下划线）<br>可用<code>00\d</code>可以匹配<code>007</code><br><code>\d\d\d</code>可以匹配任意三位数字，如：<code>123</code><br><code>\w\d\w</code>可以匹配<code>l0l</code> </li><li><code>.</code>匹配任意字符，则<br><code>any.</code>可匹配<code>anya</code>、<code>anyb</code>、<code>anyc</code>、<code>anyd</code> ……</li><li>配合上量词再看看<br><code>\d{3}</code>表示匹配3个数字，例如<code>010</code><br><code>\d{3,8}</code>表示3-8个数字，例如<code>1234567</code>  </li><li>再加上我们的范围<br><code>[0-9a-zA-Z\_]</code>可以匹配一个数字、字母或者下划线<br><code>[0-9a-zA-Z\_]+</code>可以匹配至少由一个数字、字母或者下划线组成的字符串，比如<code>a100</code>，<code>0_Z</code>，<code>Py3000</code>等等<br><code>[a-zA-Z\_][0-9a-zA-Z\_]*</code>可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量<br><code>[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}</code>更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）</li><li>啊，还有我们的选择字符和定位<br><code>A|B</code>可以匹配A或B，所以<code>(P|p)ython</code>可以匹配<code>Python</code>或者<code>python</code><br><code>^</code>表示行的开头，<code>^\d</code>表示必须以数字开头<br><code>$</code>表示行的结束，<code>\d$</code>表示必须以数字结束<br>  你可能注意到了，<code>py</code>也可以匹配<code>python</code>，但是加上<code>^py$</code>就变成了整行匹配，就只能匹配<code>py</code>了  </li><li><p>字符串的切割<br>  最常用的应该就是split切割了，但是当字符串之间不仅仅是单一字符连接，切割就会出现问题，比如下面的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//出现多余空格情况：</span></span><br><span class="line">    <span class="string">'a b   c'</span>.split(<span class="string">' '</span>); <span class="comment">// ['a', 'b', '', '', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//嗯，无法识别连续的空格，用正则表达式试试：</span></span><br><span class="line"><span class="string">'a b   c'</span>.split(<span class="regexp">/\s+/</span>); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"><span class="comment">//无论多少个空格都可以正常分割。加入,试试：</span></span><br><span class="line"></span><br><span class="line"><span class="string">'a,b, c  d'</span>.split(<span class="regexp">/[\s\,]+/</span>); <span class="comment">// ['a', 'b', 'c', 'd']</span></span><br><span class="line"><span class="comment">//再加入;试试：</span></span><br><span class="line"></span><br><span class="line"><span class="string">'a,b;; c  d'</span>.split(<span class="regexp">/[\s\,\;]+/</span>); <span class="comment">// ['a', 'b', 'c', 'd']</span></span><br><span class="line"><span class="comment">//如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。</span></span><br></pre></td></tr></table></figure></li><li><p>字符串的分组应用<br>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。比如：<code>^(\d{3})-(\d{3,8})$</code>分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$/</span>;</span><br><span class="line">re.exec(<span class="string">'010-12345'</span>); <span class="comment">// ['010-12345', '010', '12345']</span></span><br><span class="line">re.exec(<span class="string">'010 12345'</span>); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>如果正则表达式中定义了组，就可以在RegExp对象上用exec()方法提取出子串来。<br>exec()方法在匹配成功后，会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。<br>exec()方法在匹配失败时返回null。    </p><p>提取子串非常有用。来看一个更凶残的例子：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$/</span>;</span><br><span class="line">re.exec(<span class="string">'19:05:30'</span>); <span class="comment">// ['19:05:30', '19', '05', '30']</span></span><br></pre></td></tr></table></figure><p>这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$/</span>;</span><br></pre></td></tr></table></figure><p>对于’2-30’，’4-31’这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。  </p></li></ul><hr><p>以下内容参见鑫大大博客内容：    </p><ul><li>中英文之间需要增加空格<br>首先，我们的思路应该是“中文”、“英文”、“空格”，于是我们可得到&emsp;<code>/(中文+英文+|英文+中文+)/g</code>&emsp;这样的符号表达<br>转换成正则符号即:&emsp;<code>/([\u4e00-\u9fa5]+[A-Za-z]+|[A-Za-z]+[\u4e00-\u9fa5]+)/g</code><br>其中<code>[\u4e00-\u9fa5]</code>表示中文字符匹配；<code>[A-Za-z]</code>表示全部的英文字母。斜杠后面的<code>g</code>表示全局匹配，<font color="#a00">除了g，还有i和m。其中i表示不区分大小写，m表示支持多行匹配。</font><br>这里的括号和加号可化简，则最终可表达为：&emsp;<br><code>/[\u4e00-\u9fa5][a-z]|[a-z][\u4e00-\u9fa5]/gi</code>  </li><li><p>全角标点与其他字符之间不加空格<br>这里如果直接用正则表达式，会显得冗余且不易懂，故使用RegExp对象简化  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全角标点字符们  </span></span><br><span class="line"><span class="keyword">var</span> strPunct = <span class="string">'！（）【】『』「」《》“”‘’；：，。？、'</span>;  </span><br><span class="line"><span class="comment">// 使用管道符连接  </span></span><br><span class="line"><span class="keyword">var</span> regPunct = strPunct.split(<span class="string">''</span>).join(<span class="string">'|'</span>);  </span><br><span class="line"><span class="comment">// 此时的正则表达式  </span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'['</span>+ regPunct +<span class="string">'] +| +['</span>+ regPunct +<span class="string">']'</span>, <span class="string">'g'</span>);</span><br></pre></td></tr></table></figure><p>  这样就显得简洁多了<br>其中，空格使用普通空格字符进行匹配的，而不是\s，这样可以避免把换行符也过滤掉了  </p></li><li><p>不重复使用标点符号<br>这里的标点指中文标点，因为英文标点不重复，有些不切实际，例如空字符串’’，就是合法的重复标点。<br>使用正则表达式： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(\~|\<span class="string">`|\!|\[|\]|\&#123;|\&#125;|\;|\:|\"|\'|\,|\&lt;|\.|\&gt;|\/|\?|\！|\·|\【|\】\「\」|\；|\：|\“|\”|\，|\《|\。|\》|\、|\？)\1+/g</span></span><br></pre></td></tr></table></figure><p>使用RegExp对象简化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;regPunct&#125;</span>)\\1+`</span>, <span class="string">'g'</span>)</span><br></pre></td></tr></table></figure><p>  这样就是不使用重复中文标点了。<br>其中，这里的<code>\1</code>有必要好好说下。<code>\1</code>表示捕获匹配，表示捕获第一个分组括号中匹配的值，你可以理解为代称。在正则表达式中，每一个分组括号()都自带一个看不见的序号，从前往后依次是分组一，分组二，分组三……<br>这里的\1就表示匹配的第一个标点，后面跟了个+则表示，这里重复标点2个或多个都匹配。<br>捕获分组不仅存在于正则表达式中，当我们使用replace方法进行正则替换的时候，也存在与替换方法中，使用美元符号$外加数字表示，例如前后空格过滤trim()方法的简易polyfill：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="string">''</span>.trim) &#123;</span><br><span class="line"> <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// $1表示第一个()中匹配的值</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s*(.*?)\s*$/</span>, <span class="string">'$1'</span>);</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中’$1’并不是替换成字符串$1意思，而是替换成第一个()中匹配的值，在这里表示首尾空格以外的值。        如果我们需要对捕获分组内容进行额外处理，可以把第二个参数作为function处理，例如：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.replace(<span class="regexp">/^\s*(.*?)\s*$/</span>, <span class="function"><span class="keyword">function</span> (<span class="params">matches, $<span class="number">1</span></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// matches表示完整匹配内容（包括前后空格）</span></span><br><span class="line"> <span class="comment">// $1则表示第一个()中匹配的值 </span></span><br><span class="line"> <span class="comment">// 此时就可以对$1进行处理，返回我们需要的值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>破折号前后需要增加一个空格<br>这个比较简单，可直接获得：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/\S——|——\S/g</span><br></pre></td></tr></table></figure></li><li><p>使用全角中文标点<br>正则表达式  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/([^A-Za-z][\~|\<span class="string">`|\!|\[|\]|\&#123;|\&#125;|\;|\:|\"|\'|\,|\&lt;|\.|\&gt;|\/|\?][^A-Za-z])/g</span></span><br></pre></td></tr></table></figure><p>使用RegExp对象处理：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strPunctHalf = <span class="string">'!()[]"\';:,.?'</span>;</span><br><span class="line"><span class="comment">// 不同于全角字符，半角字符需要加转义</span></span><br><span class="line"><span class="keyword">var</span> regPunctHalf = strPunctHalf.split(<span class="string">''</span>).join(<span class="string">'|\\'</span>);</span><br><span class="line"><span class="comment">// 此时的正则表达式</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`[\u4e00-\u9fa5][a-z]*( *[<span class="subst">$&#123;regPunctHalf&#125;</span>] *)|( *[<span class="subst">$&#123;regPunctHalf&#125;</span>] *)[a-z]*[\u4e00-\u9fa5]`</span>, <span class="string">'gi'</span>);</span><br></pre></td></tr></table></figure></li><li><p>数字使用半角<br><code>/[\uFF10-\uFF19]+/g</code> </p></li><li><p>遇到完整的英文整句，其內容使用半角标点<br>正则表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(\「[A-Za-z\s\~|\<span class="string">`|\!|\;|\:|\"|\'|\,|\&lt;|\.|\&gt;|\/|\?]*[\！|\·|\；|\：|\“|\”|\，\。|\、|\？][^\」]*\」)|(\《[A-Za-z\s\~|\`|\!|\;|\:|\"|\'|\,|\&lt;|\.|\&gt;|\/|\?]*[\！|\·|\；|\：|\“|\”|\，\。|\、|\？][^\》]*\》)/g</span></span><br></pre></td></tr></table></figure><p>RegExp对象处理:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`([a-z]+[<span class="subst">$&#123;regPunct&#125;</span>|\\s])+[a-z]*([<span class="subst">$&#123;regPunct&#125;</span>|\\s][a-z]+)+`</span>, <span class="string">'gi'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;正则表达式的介绍就先到这里啦，怎么样，动手使用吧~~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;数据/字符串处理是工作中经常能用到的，以前的做法大都是通过百度然后修改别人的代码完成字符串处理，一直想系统的跟正则认识一番，于是有了这篇。&lt;br&gt;&amp;emsp;&amp;emsp;再次非常感谢雪峰大大和鑫大大的文章支持，点击以下链接可查看原文。&lt;br&gt;&amp;ems
      
    
    </summary>
    
      <category term="Front-End Learning" scheme="cassielala.top/categories/Front-End-Learning/"/>
    
      <category term="JavaScript" scheme="cassielala.top/categories/Front-End-Learning/JavaScript/"/>
    
    
      <category term="Front-End Learning" scheme="cassielala.top/tags/Front-End-Learning/"/>
    
      <category term="JavaScript" scheme="cassielala.top/tags/JavaScript/"/>
    
      <category term="正则表达式" scheme="cassielala.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>敢问施主因何而来</title>
    <link href="cassielala.top/2019/01/16/hello-world/"/>
    <id>cassielala.top/2019/01/16/hello-world/</id>
    <published>2019-01-16T08:37:00.000Z</published>
    <updated>2019-01-23T08:00:02.486Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;个人习惯，来到一个新的地方总是喜欢先来个开篇，阐述一下因由。<br>&emsp;&emsp;作为一个思绪如钢丝球的伪文艺女青年，我总能在某个奇怪的点在肚子里用仅有的墨水哗哗哗的长篇论述一番，并自我感觉异常良好，这篇淡墨水文或是段子，或是感思，或是记人，或是叙事，有时也可能仅是想描个景。每每这时我都特别的想发个朋友圈或是空间说说反馈我难以抑制的感觉，但又怕显得琐碎，矫情，于是默默地吞进肚子，然后被消化到淡忘。<br>&emsp;&emsp;于是来此，畅叙一番，不为什么，就怕话痨的我被程序员的静默给憋出内伤，哈哈哈哈哈哈哈哈哈哈啊。<br>&emsp;&emsp;当然，也希望在这里能够记录我的学习历程，平常会有些记笔记的习惯，但是缺少整理和系统的归纳，再者希望通过公共学习和更多的人交流，发现自己的陋习和问题。<br>&emsp;&emsp;这里大致给自己列了一个目录的提纲，诶哟喂，希望能够满满的丰富起来呀~~~<br>&emsp;&emsp;Fighting！  </p><ul><li><p>胡啦啦家的大墨池</p><ul><li>碎碎念</li><li>记人</li><li>叙事</li><li>矫情话二三  </li></ul></li><li><p>Front-End Learning</p><ul><li>HTML/CSS</li><li>JavaScript</li><li>Vue</li><li>React</li><li>Angular</li><li>Node</li><li>DataBase</li><li>Webpack</li><li>Else</li></ul></li><li><p>啦啦 is here</p><ul><li>音乐</li><li>电影</li><li>字词句段篇章</li><li>电视剧</li><li>彩铅</li><li>美食</li><li>旅游</li><li>蹦跶蹦跶dance~（估计这会是个空置项，哈哈哈  </li></ul></li></ul><p>&emsp;&emsp;最后！首篇福利，给大家看一张我超爱的图片，超级cute！！！因而最后的结果被我截图制成了头像，哇啊啊啊啊，老夫的少女心啊。<br><img src="https://upload-images.jianshu.io/upload_images/6020007-24c7e13614858e1e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="panda.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;个人习惯，来到一个新的地方总是喜欢先来个开篇，阐述一下因由。&lt;br&gt;&amp;emsp;&amp;emsp;作为一个思绪如钢丝球的伪文艺女青年，我总能在某个奇怪的点在肚子里用仅有的墨水哗哗哗的长篇论述一番，并自我感觉异常良好，这篇淡墨水文或是段子，或是感思，或是记人
      
    
    </summary>
    
      <category term="胡啦啦家的大墨池" scheme="cassielala.top/categories/%E8%83%A1%E5%95%A6%E5%95%A6%E5%AE%B6%E7%9A%84%E5%A4%A7%E5%A2%A8%E6%B1%A0/"/>
    
      <category term="碎碎念" scheme="cassielala.top/categories/%E8%83%A1%E5%95%A6%E5%95%A6%E5%AE%B6%E7%9A%84%E5%A4%A7%E5%A2%A8%E6%B1%A0/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="碎碎念" scheme="cassielala.top/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
</feed>
