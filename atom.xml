<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LALA就是ME</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="cassielala.top/"/>
  <updated>2019-01-28T08:40:55.646Z</updated>
  <id>cassielala.top/</id>
  
  <author>
    <name>Cassie LaLa</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS  counter属性</title>
    <link href="cassielala.top/2019/01/27/css/"/>
    <id>cassielala.top/2019/01/27/css/</id>
    <published>2019-01-28T02:43:00.000Z</published>
    <updated>2019-01-28T08:40:55.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文引用张鑫旭大大博客文章《CSS counter计数器(content目录序号自动递增)详解》，一直觉得鑫大大是个被程序员耽误的小说家，他的文章风格大都以浅明深，诙谐幽默，可点击<a href="https://www.zhangxinxu.com/wordpress/2014/08/css-counters-automatic-number-content/comment-page-1/#comment-391220" target="_blank" rel="noopener">这里</a>查看原文哦。</p></blockquote><p>好了，It’s my show time!<br>在了解到<code>counter</code>之前，想到计数应该属<code>ul</code>，<code>ol</code>标签元素了吧，但它们的递增规则单一，无法实现自定义的递增。而<code>counter</code>属性完美的解决了这个问题，让我们一起来看看吧。<br>首先，使用一个属性前，我们一定得了解一下它的兼容性，曾经被IE兼容性虐哭的我，不得不小心作为一个好用属性的兼容问题。</p><h2 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性"></a>兼容性</h2><table><thead><tr><th style="text-align:center">&nbsp;I&nbsp;E&nbsp;&nbsp;</th><th style="text-align:center">Firefox</th><th style="text-align:center">Chrome</th><th style="text-align:center">Safari</th><th style="text-align:center">Opera</th><th style="text-align:center">iOS Safari</th><th style="text-align:center">Android Browser</th><th style="text-align:center">Android Chrome</th></tr></thead><tbody><tr><td style="text-align:center">8.0+</td><td style="text-align:center">2.0+</td><td style="text-align:center">4.0+</td><td style="text-align:center">3.1+</td><td style="text-align:center">3.5+</td><td style="text-align:center">3.2+</td><td style="text-align:center">2.1+</td><td style="text-align:center">18.0+</td></tr></tbody></table><p>&emsp;&emsp;看到这里是不是心里放松了很多，它的兼容性还是可以的接受的，范围不算局限。</p><h2 id="counter的使用题要"><a href="#counter的使用题要" class="headerlink" title="counter的使用题要"></a>counter的使用题要</h2><blockquote><p>CSS计数器只能跟content属性在一起的时候才有作用，而content属性貌似专门用在before/after伪元素上的。于是，就有了，“计数器↔伪元素↔content属性”的铁三角关系</p></blockquote><h2 id="counter成员"><a href="#counter成员" class="headerlink" title="counter成员"></a>counter成员</h2><p>counter的成员主要有三个：</p><ul><li>counter-reset（计数器声明及初始值设置）</li><li>counter-increment（递增规则）</li><li>counter()/counters(计算结果生成)  </li></ul><h3 id="counter-reset"><a href="#counter-reset" class="headerlink" title="counter-reset"></a>counter-reset</h3><p><code>counter-reset</code>主要有三个属性。</p><ul><li><code>none</code>：默认。不能对选择器的计数器进行重置。</li><li><code>name num</code>：<code>name</code>即标记计数器名称，<code>num</code>即记录计数器初始值。<code>num</code>非必写，默认为0。  </li><li><code>inherit</code>：规定应该从父元素继承 counter-reset 属性的值。</li></ul><h3 id="counter-increment"><a href="#counter-increment" class="headerlink" title="counter-increment"></a>counter-increment</h3><p><code>counter-increment</code>主要有三个属性。</p><ul><li><code>none</code>：没有计数器将递增。</li><li><code>name num</code>：<code>name</code>即选择递增的计数器，<code>num</code>即增量。<code>num</code>非必写，默认为1，可以是正数、零或者负数。</li><li><code>inherit</code>：指定counter-increment属性的值，应该从父元素继承。</li></ul><h3 id="counter-counters"><a href="#counter-counters" class="headerlink" title="counter()/counters()"></a>counter()/counters()</h3><p>这是个方法，不是属性。类似CSS3中才calc()计算。</p><ul><li><code>name</code>：选择递增的计数器。</li><li><code>style</code>：递增的数字样式：阿拉伯数字，罗马数字等，具体如下：<blockquote><p>list-style-type：disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none | armenian | cjk-ideographic | georgian | lower-greek | hebrew | hiragana | hiragana-iroha | katakana | katakana-iroha | lower-latin | upper-latin</p></blockquote></li><li><code>string</code>：counters的属性，子序数连接符  </li></ul><p><font color="#a00">注：</font>多个计数器还可同时命名，接下来我们上代码看几个例子。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">CSS</span>：</span><br><span class="line">1. <span class="selector-tag">counter-reset</span>属性</span><br><span class="line"><span class="selector-class">.xxx</span> &#123; </span><br><span class="line">  <span class="attribute">counter-reset</span>: count; <span class="comment">/* 计数器名称是'count', 并且默认起始值为0 */</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.xxx</span> &#123; </span><br><span class="line">  <span class="attribute">counter-reset</span>: count <span class="number">4</span>; <span class="comment">/* 计数器名称是'count', 并且默认起始值为4 */</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-class">.xxx</span> &#123; </span><br><span class="line">  <span class="attribute">counter-reset</span>: count1 <span class="number">2</span> count2 <span class="number">3</span>; <span class="comment">/* 定义两个计数器'count1'和'count2',默认起始值分别为2和3 */</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">2. <span class="selector-tag">counter-increment</span>属性</span><br><span class="line"><span class="selector-class">.counter</span> &#123; </span><br><span class="line">  <span class="attribute">counter-increment</span>: count <span class="number">2</span>; <span class="comment">/*'count'以2阶段递增 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.counter</span> &#123; </span><br><span class="line">  <span class="attribute">counter-increment</span>: count -<span class="number">1</span>;  <span class="comment">/*'count'以1阶段递减 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">3. <span class="selector-tag">counter</span>方法</span><br><span class="line"><span class="selector-tag">counters</span>(<span class="selector-tag">name</span>, <span class="selector-tag">style</span>);</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.counter</span><span class="selector-pseudo">:before</span> &#123; </span><br><span class="line">  <span class="attribute">content</span>: <span class="built_in">counter</span>(count1) <span class="string">'\A'</span> <span class="built_in">counter</span>(count2);  <span class="comment">/*'\A'使用inline水平元素换行*/</span></span><br><span class="line">  <span class="attribute">white-space</span>: pre; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;接下来看一个完整的例子。<br>效果如图：<br><img src="/27/css/css-counter_1.jpg" alt="counters例子"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>一级标题</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>二级标题</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span>一级标题<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.box</span> &#123; </span></span><br><span class="line"><span class="undefined">  counter-reset: counter; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.toper</span>, <span class="selector-class">.inner</span> &#123; </span></span><br><span class="line"><span class="css">  <span class="selector-tag">background-color</span>: <span class="selector-id">#eee</span>; </span></span><br><span class="line"><span class="undefined">  margin-left: 20px; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.list</span><span class="selector-pseudo">:before</span>, </span></span><br><span class="line"><span class="css"><span class="selector-class">.toper</span><span class="selector-pseudo">:before</span>,</span></span><br><span class="line"><span class="css"><span class="selector-class">.inner</span><span class="selector-pseudo">:before</span> &#123; </span></span><br><span class="line"><span class="undefined">  counter-increment: counter; </span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.list</span> &#123;</span></span><br><span class="line"><span class="undefined">  padding-left: 20px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.inner</span><span class="selector-pseudo">:before</span>, </span></span><br><span class="line"><span class="css"><span class="selector-class">.list</span><span class="selector-pseudo">:before</span>, </span></span><br><span class="line"><span class="css"><span class="selector-class">.toper</span><span class="selector-pseudo">:before</span> &#123;</span></span><br><span class="line"><span class="undefined">  content: counters(counter,'.')'、';</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>OK~至此，关于counter的介绍就差不多结束了，可以在实践过程中发现和挖掘更有意思的操作，如果你有什么有趣的神操作，可以给我留言分享哦！啦啦啦~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文引用张鑫旭大大博客文章《CSS counter计数器(content目录序号自动递增)详解》，一直觉得鑫大大是
      
    
    </summary>
    
      <category term="Front-End Learning" scheme="cassielala.top/categories/Front-End-Learning/"/>
    
      <category term="HTML/CSS" scheme="cassielala.top/categories/Front-End-Learning/HTML-CSS/"/>
    
    
      <category term="Front-End Learning" scheme="cassielala.top/tags/Front-End-Learning/"/>
    
      <category term="HTML/CSS" scheme="cassielala.top/tags/HTML-CSS/"/>
    
      <category term="css counter" scheme="cassielala.top/tags/css-counter/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="cassielala.top/2019/01/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>cassielala.top/2019/01/22/正则表达式/</id>
    <published>2019-01-23T02:09:55.000Z</published>
    <updated>2019-01-28T02:47:11.737Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;数据/字符串处理是工作中经常能用到的，以前的做法大都是通过百度然后修改别人的代码完成字符串处理，一直想系统的跟正则认识一番，于是有了这篇。<br>&emsp;&emsp;再次非常感谢雪峰大大和鑫大大的文章支持，点击以下链接可查看原文。<br>&emsp;&emsp;雪峰大大的 <a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434499503920bb7b42ff6627420da2ceae4babf6c4f2000" target="_blank" rel="noopener">标准对象/RegExp</a>.<br>&emsp;&emsp;鑫大大的 <a href="https://www.zhangxinxu.com/wordpress/2019/01/js-quiz-27/" target="_blank" rel="noopener">粉丝群第27期JS基础小测答疑文字版</a><br>&emsp;&emsp;好的，接下来进入正题啦。  </p><h2 id="正则表达式定义"><a href="#正则表达式定义" class="headerlink" title="正则表达式定义"></a>正则表达式定义</h2><p>&emsp;&emsp;正则表达式是对字符串操作的一种逻辑公式，用事先定义好的一些特定字符、及这些特定字符的组合，组成一个“规则字符串”，这个“规则字符串”用来表达对字符串的一种过滤逻辑。<br>举个例子：<br>&emsp;&emsp;’00\d’可以匹配’007’，‘008’，其中‘\d’即匹配数字。  </p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table><thead><tr><th style="text-align:center">&nbsp;字&nbsp;符&nbsp;&nbsp;</th><th style="text-align:left">描&nbsp;述</th><th style="text-align:center">&nbsp;反义字符&nbsp;&nbsp;</th><th style="text-align:left">描&nbsp;述</th></tr></thead><tbody><tr><td style="text-align:center">$</td><td style="text-align:left">匹配输入字符串的结尾位置</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">^</td><td style="text-align:left">匹配输入字符串的开始位置</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">.</td><td style="text-align:left">匹配除换行符 \n 之外的任何单字符</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">\b</td><td style="text-align:left">匹配单词边界</td><td style="text-align:center">\B</td><td style="text-align:left">匹配不是单词开头或结束的位置</td></tr><tr><td style="text-align:center">\d</td><td style="text-align:left">匹配数字</td><td style="text-align:center">\D</td><td style="text-align:left">匹配任意非数字的字符</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:left">匹配字母，数字，下划线</td><td style="text-align:center">\W</td><td style="text-align:left">匹配任意不是字母，数字，下划线 的字符</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:left">匹配空格</td><td style="text-align:center">\S</td><td style="text-align:left">匹配任意不是空白符的字符</td></tr><tr><td style="text-align:center">[abc]</td><td style="text-align:left">匹配包含括号内元素的字符</td><td style="text-align:center">[^abc]</td><td style="text-align:left">匹配除了abc以外的任意字符 </td></tr></tbody></table><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><table><thead><tr><th style="text-align:center">&nbsp;字&nbsp;符&nbsp;&nbsp;</th><th style="text-align:left">描&nbsp;述</th><th style="text-align:center">&nbsp;带?字符&nbsp;&nbsp;</th><th style="text-align:left">描&nbsp;述</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td style="text-align:left">重复至少0次</td><td style="text-align:center">*?</td><td style="text-align:left">重复任意次,但尽可能少重复</td></tr><tr><td style="text-align:center">+</td><td style="text-align:left">重复至少1次</td><td style="text-align:center">+?</td><td style="text-align:left">重复至少1次,但尽可能少重复</td></tr><tr><td style="text-align:center">?</td><td style="text-align:left">重复0次或1次</td><td style="text-align:center">??</td><td style="text-align:left">重复0次或1次,但尽可能少重复</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:left">重复n次</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:left">重复至少n次</td><td style="text-align:center">{n,}?</td><td style="text-align:left">重复至少n次,但尽可能少重复</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:left">重复n-m次</td><td style="text-align:center">{n,m}?</td><td style="text-align:left">重复n-m次,但尽可能少重复</td></tr></tbody></table><h3 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h3><table><thead><tr><th style="text-align:center">&nbsp;字&nbsp;符&nbsp;&nbsp;</th><th style="text-align:left">描&nbsp;述</th><th style="text-align:center">&nbsp;字&nbsp;符&nbsp;&nbsp;</th><th style="text-align:left">描&nbsp;述</th></tr></thead><tbody><tr><td style="text-align:center">\cx</td><td style="text-align:left">匹配由x指明的控制字符。</td><td style="text-align:center"></td><td style="text-align:left"></td></tr><tr><td style="text-align:center">\f</td><td style="text-align:left">匹配一个换页符。等价于 \x0c 和 \cL。</td><td style="text-align:center">( )</td><td style="text-align:left">标记一个子表达式的开始和结束位置。</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:left">匹配一个换行符。等价于 \x0a 和 \cJ。</td><td style="text-align:center">&#124;</td><td style="text-align:left">指明两项之间的一个选择，或</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:left">匹配一个回车符。等价于 \x0d 和 \cM。</td><td style="text-align:center">[</td><td style="text-align:left">标记一个中括号表达式的开始</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:left">匹配任何空白字符，包括空格、制表符、换页符等等。</td><td style="text-align:center">\</td><td style="text-align:left">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:left">匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。</td><td style="text-align:center">{</td><td style="text-align:left">标记限定符表达式的开始。</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:left">匹配一个制表符。等价于 \x09 和 \cI。</td><td style="text-align:center">\v</td><td style="text-align:left">匹配一个垂直制表符。等价于 \x0b 和 \cK。</td></tr></tbody></table><h2 id="举例说明"><a href="#举例说明" class="headerlink" title="举例说明"></a>举例说明</h2><ul><li>数字、字母匹配（<code>\d</code>匹配数字，<code>\w</code>匹配任意字母，数字，下划线）<br>可用<code>00\d</code>可以匹配<code>007</code><br><code>\d\d\d</code>可以匹配任意三位数字，如：<code>123</code><br><code>\w\d\w</code>可以匹配<code>l0l</code> </li><li><code>.</code>匹配任意字符，则<br><code>any.</code>可匹配<code>anya</code>、<code>anyb</code>、<code>anyc</code>、<code>anyd</code> ……</li><li>配合上量词再看看<br><code>\d{3}</code>表示匹配3个数字，例如<code>010</code><br><code>\d{3,8}</code>表示3-8个数字，例如<code>1234567</code>  </li><li>再加上我们的范围<br><code>[0-9a-zA-Z\_]</code>可以匹配一个数字、字母或者下划线<br><code>[0-9a-zA-Z\_]+</code>可以匹配至少由一个数字、字母或者下划线组成的字符串，比如<code>a100</code>，<code>0_Z</code>，<code>Py3000</code>等等<br><code>[a-zA-Z\_][0-9a-zA-Z\_]*</code>可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量<br><code>[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}</code>更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）</li><li>啊，还有我们的选择字符和定位<br><code>A|B</code>可以匹配A或B，所以<code>(P|p)ython</code>可以匹配<code>Python</code>或者<code>python</code><br><code>^</code>表示行的开头，<code>^\d</code>表示必须以数字开头<br><code>$</code>表示行的结束，<code>\d$</code>表示必须以数字结束<br>  你可能注意到了，<code>py</code>也可以匹配<code>python</code>，但是加上<code>^py$</code>就变成了整行匹配，就只能匹配<code>py</code>了  </li><li><p>字符串的切割<br>  最常用的应该就是split切割了，但是当字符串之间不仅仅是单一字符连接，切割就会出现问题，比如下面的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//出现多余空格情况：</span></span><br><span class="line">    <span class="string">'a b   c'</span>.split(<span class="string">' '</span>); <span class="comment">// ['a', 'b', '', '', 'c']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//嗯，无法识别连续的空格，用正则表达式试试：</span></span><br><span class="line"><span class="string">'a b   c'</span>.split(<span class="regexp">/\s+/</span>); <span class="comment">// ['a', 'b', 'c']</span></span><br><span class="line"><span class="comment">//无论多少个空格都可以正常分割。加入,试试：</span></span><br><span class="line"></span><br><span class="line"><span class="string">'a,b, c  d'</span>.split(<span class="regexp">/[\s\,]+/</span>); <span class="comment">// ['a', 'b', 'c', 'd']</span></span><br><span class="line"><span class="comment">//再加入;试试：</span></span><br><span class="line"></span><br><span class="line"><span class="string">'a,b;; c  d'</span>.split(<span class="regexp">/[\s\,\;]+/</span>); <span class="comment">// ['a', 'b', 'c', 'd']</span></span><br><span class="line"><span class="comment">//如果用户输入了一组标签，下次记得用正则表达式来把不规范的输入转化成正确的数组。</span></span><br></pre></td></tr></table></figure></li><li><p>字符串的分组应用<br>除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。比如：<code>^(\d{3})-(\d{3,8})$</code>分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^(\d&#123;3&#125;)-(\d&#123;3,8&#125;)$/</span>;</span><br><span class="line">re.exec(<span class="string">'010-12345'</span>); <span class="comment">// ['010-12345', '010', '12345']</span></span><br><span class="line">re.exec(<span class="string">'010 12345'</span>); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>如果正则表达式中定义了组，就可以在RegExp对象上用exec()方法提取出子串来。<br>exec()方法在匹配成功后，会返回一个Array，第一个元素是正则表达式匹配到的整个字符串，后面的字符串表示匹配成功的子串。<br>exec()方法在匹配失败时返回null。    </p><p>提取子串非常有用。来看一个更凶残的例子：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$/</span>;</span><br><span class="line">re.exec(<span class="string">'19:05:30'</span>); <span class="comment">// ['19:05:30', '19', '05', '30']</span></span><br></pre></td></tr></table></figure><p>这个正则表达式可以直接识别合法的时间。但是有些时候，用正则表达式也无法做到完全验证，比如识别日期：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/^(0[1-9]|1[0-2]|[0-9])-(0[1-9]|1[0-9]|2[0-9]|3[0-1]|[0-9])$/</span>;</span><br></pre></td></tr></table></figure><p>对于’2-30’，’4-31’这样的非法日期，用正则还是识别不了，或者说写出来非常困难，这时就需要程序配合识别了。  </p></li></ul><hr><p>以下内容参见鑫大大博客内容：    </p><ul><li>中英文之间需要增加空格<br>首先，我们的思路应该是“中文”、“英文”、“空格”，于是我们可得到&emsp;<code>/(中文+英文+|英文+中文+)/g</code>&emsp;这样的符号表达<br>转换成正则符号即:&emsp;<code>/([\u4e00-\u9fa5]+[A-Za-z]+|[A-Za-z]+[\u4e00-\u9fa5]+)/g</code><br>其中<code>[\u4e00-\u9fa5]</code>表示中文字符匹配；<code>[A-Za-z]</code>表示全部的英文字母。斜杠后面的<code>g</code>表示全局匹配，<font color="#a00">除了g，还有i和m。其中i表示不区分大小写，m表示支持多行匹配。</font><br>这里的括号和加号可化简，则最终可表达为：&emsp;<br><code>/[\u4e00-\u9fa5][a-z]|[a-z][\u4e00-\u9fa5]/gi</code>  </li><li><p>全角标点与其他字符之间不加空格<br>这里如果直接用正则表达式，会显得冗余且不易懂，故使用RegExp对象简化  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全角标点字符们  </span></span><br><span class="line"><span class="keyword">var</span> strPunct = <span class="string">'！（）【】『』「」《》“”‘’；：，。？、'</span>;  </span><br><span class="line"><span class="comment">// 使用管道符连接  </span></span><br><span class="line"><span class="keyword">var</span> regPunct = strPunct.split(<span class="string">''</span>).join(<span class="string">'|'</span>);  </span><br><span class="line"><span class="comment">// 此时的正则表达式  </span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'['</span>+ regPunct +<span class="string">'] +| +['</span>+ regPunct +<span class="string">']'</span>, <span class="string">'g'</span>);</span><br></pre></td></tr></table></figure><p>  这样就显得简洁多了<br>其中，空格使用普通空格字符进行匹配的，而不是\s，这样可以避免把换行符也过滤掉了  </p></li><li><p>不重复使用标点符号<br>这里的标点指中文标点，因为英文标点不重复，有些不切实际，例如空字符串’’，就是合法的重复标点。<br>使用正则表达式： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(\~|\<span class="string">`|\!|\[|\]|\&#123;|\&#125;|\;|\:|\"|\'|\,|\&lt;|\.|\&gt;|\/|\?|\！|\·|\【|\】\「\」|\；|\：|\“|\”|\，|\《|\。|\》|\、|\？)\1+/g</span></span><br></pre></td></tr></table></figure><p>使用RegExp对象简化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`(<span class="subst">$&#123;regPunct&#125;</span>)\\1+`</span>, <span class="string">'g'</span>)</span><br></pre></td></tr></table></figure><p>  这样就是不使用重复中文标点了。<br>其中，这里的<code>\1</code>有必要好好说下。<code>\1</code>表示捕获匹配，表示捕获第一个分组括号中匹配的值，你可以理解为代称。在正则表达式中，每一个分组括号()都自带一个看不见的序号，从前往后依次是分组一，分组二，分组三……<br>这里的\1就表示匹配的第一个标点，后面跟了个+则表示，这里重复标点2个或多个都匹配。<br>捕获分组不仅存在于正则表达式中，当我们使用replace方法进行正则替换的时候，也存在与替换方法中，使用美元符号$外加数字表示，例如前后空格过滤trim()方法的简易polyfill：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="string">''</span>.trim) &#123;</span><br><span class="line"> <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// $1表示第一个()中匹配的值</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s*(.*?)\s*$/</span>, <span class="string">'$1'</span>);</span><br><span class="line"> &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中’$1’并不是替换成字符串$1意思，而是替换成第一个()中匹配的值，在这里表示首尾空格以外的值。        如果我们需要对捕获分组内容进行额外处理，可以把第二个参数作为function处理，例如：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.replace(<span class="regexp">/^\s*(.*?)\s*$/</span>, <span class="function"><span class="keyword">function</span> (<span class="params">matches, $<span class="number">1</span></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// matches表示完整匹配内容（包括前后空格）</span></span><br><span class="line"> <span class="comment">// $1则表示第一个()中匹配的值 </span></span><br><span class="line"> <span class="comment">// 此时就可以对$1进行处理，返回我们需要的值</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>破折号前后需要增加一个空格<br>这个比较简单，可直接获得：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/\S——|——\S/g</span><br></pre></td></tr></table></figure></li><li><p>使用全角中文标点<br>正则表达式  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/([^A-Za-z][\~|\<span class="string">`|\!|\[|\]|\&#123;|\&#125;|\;|\:|\"|\'|\,|\&lt;|\.|\&gt;|\/|\?][^A-Za-z])/g</span></span><br></pre></td></tr></table></figure><p>使用RegExp对象处理：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strPunctHalf = <span class="string">'!()[]"\';:,.?'</span>;</span><br><span class="line"><span class="comment">// 不同于全角字符，半角字符需要加转义</span></span><br><span class="line"><span class="keyword">var</span> regPunctHalf = strPunctHalf.split(<span class="string">''</span>).join(<span class="string">'|\\'</span>);</span><br><span class="line"><span class="comment">// 此时的正则表达式</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`[\u4e00-\u9fa5][a-z]*( *[<span class="subst">$&#123;regPunctHalf&#125;</span>] *)|( *[<span class="subst">$&#123;regPunctHalf&#125;</span>] *)[a-z]*[\u4e00-\u9fa5]`</span>, <span class="string">'gi'</span>);</span><br></pre></td></tr></table></figure></li><li><p>数字使用半角<br><code>/[\uFF10-\uFF19]+/g</code> </p></li><li><p>遇到完整的英文整句，其內容使用半角标点<br>正则表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/(\「[A-Za-z\s\~|\<span class="string">`|\!|\;|\:|\"|\'|\,|\&lt;|\.|\&gt;|\/|\?]*[\！|\·|\；|\：|\“|\”|\，\。|\、|\？][^\」]*\」)|(\《[A-Za-z\s\~|\`|\!|\;|\:|\"|\'|\,|\&lt;|\.|\&gt;|\/|\?]*[\！|\·|\；|\：|\“|\”|\，\。|\、|\？][^\》]*\》)/g</span></span><br></pre></td></tr></table></figure><p>RegExp对象处理:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">`([a-z]+[<span class="subst">$&#123;regPunct&#125;</span>|\\s])+[a-z]*([<span class="subst">$&#123;regPunct&#125;</span>|\\s][a-z]+)+`</span>, <span class="string">'gi'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>&emsp;&emsp;正则表达式的介绍就先到这里啦，怎么样，动手使用吧~~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;数据/字符串处理是工作中经常能用到的，以前的做法大都是通过百度然后修改别人的代码完成字符串处理，一直想系统的跟正则认识一番，于是有了这篇。&lt;br&gt;&amp;emsp;&amp;emsp;再次非常感谢雪峰大大和鑫大大的文章支持，点击以下链接可查看原文。&lt;br&gt;&amp;ems
      
    
    </summary>
    
      <category term="Front-End Learning" scheme="cassielala.top/categories/Front-End-Learning/"/>
    
      <category term="JavaScript" scheme="cassielala.top/categories/Front-End-Learning/JavaScript/"/>
    
    
      <category term="Front-End Learning" scheme="cassielala.top/tags/Front-End-Learning/"/>
    
      <category term="JavaScript" scheme="cassielala.top/tags/JavaScript/"/>
    
      <category term="正则表达式" scheme="cassielala.top/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>敢问施主因何而来</title>
    <link href="cassielala.top/2019/01/16/hello-world/"/>
    <id>cassielala.top/2019/01/16/hello-world/</id>
    <published>2019-01-16T08:37:00.000Z</published>
    <updated>2019-01-23T08:00:02.486Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;个人习惯，来到一个新的地方总是喜欢先来个开篇，阐述一下因由。<br>&emsp;&emsp;作为一个思绪如钢丝球的伪文艺女青年，我总能在某个奇怪的点在肚子里用仅有的墨水哗哗哗的长篇论述一番，并自我感觉异常良好，这篇淡墨水文或是段子，或是感思，或是记人，或是叙事，有时也可能仅是想描个景。每每这时我都特别的想发个朋友圈或是空间说说反馈我难以抑制的感觉，但又怕显得琐碎，矫情，于是默默地吞进肚子，然后被消化到淡忘。<br>&emsp;&emsp;于是来此，畅叙一番，不为什么，就怕话痨的我被程序员的静默给憋出内伤，哈哈哈哈哈哈哈哈哈哈啊。<br>&emsp;&emsp;当然，也希望在这里能够记录我的学习历程，平常会有些记笔记的习惯，但是缺少整理和系统的归纳，再者希望通过公共学习和更多的人交流，发现自己的陋习和问题。<br>&emsp;&emsp;这里大致给自己列了一个目录的提纲，诶哟喂，希望能够满满的丰富起来呀~~~<br>&emsp;&emsp;Fighting！  </p><ul><li><p>胡啦啦家的大墨池</p><ul><li>碎碎念</li><li>记人</li><li>叙事</li><li>矫情话二三  </li></ul></li><li><p>Front-End Learning</p><ul><li>HTML/CSS</li><li>JavaScript</li><li>Vue</li><li>React</li><li>Angular</li><li>Node</li><li>DataBase</li><li>Webpack</li><li>Else</li></ul></li><li><p>啦啦 is here</p><ul><li>音乐</li><li>电影</li><li>字词句段篇章</li><li>电视剧</li><li>彩铅</li><li>美食</li><li>旅游</li><li>蹦跶蹦跶dance~（估计这会是个空置项，哈哈哈  </li></ul></li></ul><p>&emsp;&emsp;最后！首篇福利，给大家看一张我超爱的图片，超级cute！！！因而最后的结果被我截图制成了头像，哇啊啊啊啊，老夫的少女心啊。<br><img src="https://upload-images.jianshu.io/upload_images/6020007-24c7e13614858e1e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="panda.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;个人习惯，来到一个新的地方总是喜欢先来个开篇，阐述一下因由。&lt;br&gt;&amp;emsp;&amp;emsp;作为一个思绪如钢丝球的伪文艺女青年，我总能在某个奇怪的点在肚子里用仅有的墨水哗哗哗的长篇论述一番，并自我感觉异常良好，这篇淡墨水文或是段子，或是感思，或是记人
      
    
    </summary>
    
      <category term="胡啦啦家的大墨池" scheme="cassielala.top/categories/%E8%83%A1%E5%95%A6%E5%95%A6%E5%AE%B6%E7%9A%84%E5%A4%A7%E5%A2%A8%E6%B1%A0/"/>
    
      <category term="碎碎念" scheme="cassielala.top/categories/%E8%83%A1%E5%95%A6%E5%95%A6%E5%AE%B6%E7%9A%84%E5%A4%A7%E5%A2%A8%E6%B1%A0/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
      <category term="碎碎念" scheme="cassielala.top/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
</feed>
